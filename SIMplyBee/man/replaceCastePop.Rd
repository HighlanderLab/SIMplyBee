% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L2_Colony.R
\name{replaceCastePop}
\alias{replaceCastePop}
\alias{replaceVirginQueens}
\alias{replaceWorkers}
\alias{replaceDrones}
\title{Replace a proportion of caste population individuals with new ones}
\usage{
replaceCastePop(
  x,
  caste = NULL,
  p = 1,
  use = "rand",
  exact = TRUE,
  year = NULL,
  simParamBee = NULL
)

replaceVirginQueens(x, p = 1, use = "rand", simParamBee = NULL)

replaceWorkers(x, p = 1, use = "rand", exact = TRUE, simParamBee = NULL)

replaceDrones(x, p = 1, use = "rand", simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{caste}{character, "workers", "drones", or "virginQueens"}

\item{p}{numeric, proportion of caste individuals to be replaced with new ones}

\item{use}{character, all the options provided by \code{\link{selectInd}} -
guides selection of caste individuals that stay when \code{p < 1}}

\item{exact}{logical, only relevant when adding workers - if the csd locus is turned
on and exact is \code{TRUE}, we replace the exact specified number of viable workers
(heterozygous at the csd locus). You probably want this set to TRUE since you want to
replace with the same number of workers.}

\item{year}{numeric, only relevant when replacing virgin queens,
year of birth for virgin queens}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
\code{\link{Colony-class}} or  or \code{\link{MultiColony-class}} with
  replaced virgin queens
}
\description{
Level 2 function that replaces a proportion of caste individuals
  with new individuals from a Colony or MultiColony object. Useful after
  events like season change, swarming, supersedure, etc. due to the short life span
 honeybees.
}
\section{Functions}{
\itemize{
\item \code{replaceVirginQueens()}: Replaces some virgin queens in a colony

\item \code{replaceWorkers()}: Replaces some workers in a colony

\item \code{replaceDrones()}: Replaces some drones in a colony

}}
\examples{
founderGenomes <- quickHaplo(nInd = 5, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 100)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 5, nFathers = nFathersPoisson)

# Create and cross Colony and MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
apiary <- createMultiColony(basePop[4:5], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[3:4])

# Add individuals
colony <- buildUp(colony, nWorkers = 10, nDrones = 10)
colony <- addVirginQueens(colony, nInd = 5)
apiary <- buildUp(apiary, nWorkers = 10, nDrones = 10)
apiary <- addVirginQueens(apiary, nInd = 20)

# Replace individuals in a colony
getVirginQueens(colony)@id
colony <- replaceCastePop(colony, caste = "virginQueens", p = 0.5)
# or shortcut: replaceVirginQueens(colony, p = 0.5)
getVirginQueens(colony)@id
getWorkers(colony)@id
colony <- replaceCastePop(colony, caste = "workers", p = 0.5)
# or shortcut: replaceWorkers(colony, p = 0.5)
getWorkers(colony)@id
getDrones(colony)@id
colony <- replaceCastePop(colony, caste = "drones", p = 0.5)
# or shortcut: replaceDrones(colony, p = 0.5)
getDrones(colony)@id

lapply(getVirginQueens(apiary), FUN = function(x) x@id)
apiary <- replaceVirginQueens(apiary, p = 0.5)
lapply(getVirginQueens(apiary), FUN = function(x) x@id)
apiary <- replaceWorkers(apiary, p = 1)
lapply(getWorkers(apiary), FUN = function(x) x@id)
apiary <- replaceDrones(apiary, p = 1)
lapply(getDrones(apiary), FUN = function(x) x@id)
}
