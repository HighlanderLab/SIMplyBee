% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L3_Colonies.R
\name{buildUpColonies}
\alias{buildUpColonies}
\title{Build up colony by adding (raising) workers and drones for all given
  colonies}
\usage{
buildUpColonies(
  colonies,
  nWorkers = NULL,
  nDrones = NULL,
  new = FALSE,
  resetEvents = FALSE,
  simParamBee = NULL
)
}
\arguments{
\item{colonies}{\code{\link{Colonies-class}}}

\item{nWorkers}{numeric or function, number of worker; if \code{NULL} then
\code{simParamBee$nWorkers} is used (unless \code{new = TRUE}, currently
present workers are taken into account and only the missing difference is
added)}

\item{nDrones}{numeric or function, number of drones; if \code{NULL} then
\code{simParamBee$nDrones} is used (unless \code{new = TRUE}, currently
present drones are taken into account so only the missing difference is
added)}

\item{new}{logical, should the workers and drones be added a fresh (ignoring
currently present workers and drones)}

\item{resetEvents}{logical, call \code{\link{resetEvents}} as part of the
build up}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
\code{\link{Colonies-class}} with workers and drones added
}
\description{
Level 3 function that does the same as
  \code{\link{buildUpColony}} but for all given colonies.
}
\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- newPop(founderGenomes)

drones <- createFounderDrones(pop = basePop[1], nDronesPerQueen = 10)
colony1 <- createColony(queen = basePop[2], fathers = drones[1:5])
colony2 <- createColony(queen = basePop[3], fathers = drones[6:10])
apiary <- c(colony1, colony2)
isProductive(apiary)
apiary[[1]]
apiary[[2]]

# Using defaults in SP
# (just to have some bees - change this to your needs!)
(apiary <- buildUpColonies(apiary))
isProductive(apiary)
apiary[[1]]
apiary[[2]]

apiary <- buildUpColonies(apiary, nWorkers = 100)
apiary[[1]] # we are already at the target
apiary <- buildUpColonies(apiary, nWorkers = 150)
apiary[[1]] # increasing the target
apiary <- buildUpColonies(apiary, nWorkers = 100)
apiary[[1]] # we are already at the target
apiary <- buildUpColonies(apiary, nWorkers = 100, new = TRUE)
apiary[[1]] # adding completely new workers & drones

# Using functions
nWorkersFun <- function(colony) { rpois(n = 1, lambda = 100) }
nDronesFun <- function(colony) { rpois(n = 1, lambda = 15) }
apiary <- c(colony1, colony2)
tmp <- buildUpColonies(apiary, nWorkers = nWorkersFun, nDrones = nDronesFun)
tmp[[1]]
tmp[[2]]
tmp <- buildUpColonies(apiary, nWorkers = nWorkersFun, nDrones = nDronesFun)
tmp[[1]]
tmp[[2]]

# Using functions in simParamBee
SP$nWorkers <- nWorkersFun
SP$nDrones <- nDronesFun
apiary <- c(colony1, colony2)
tmp <- buildUpColonies(apiary)
tmp[[1]]
tmp[[2]]
tmp <- buildUpColonies(apiary)
tmp[[1]]
tmp[[2]]

}
