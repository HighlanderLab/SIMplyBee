% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getColonyQtlGeno}
\alias{getColonyQtlGeno}
\title{Access QTL genotypes of individuals in colony}
\usage{
getColonyQtlGeno(
  x,
  caste = c("queen", "fathers", "virgin_queens", "workers", "drones"),
  nInd = NULL,
  trait = 1,
  chr = NULL,
  simParamBee = NULL
)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{Colonies-class}}}

\item{caste}{character, a combination of "queen", "fathers", "virgin_queens",
"workers", or "drones"}

\item{nInd}{numeric, number of individuals to access, if \code{NULL} all
individuals are accessed, otherwise a random sample; can be a list to
access different number of different caste - when this is the case
\code{nInd} takes precedence over \code{caste} (see examples)}

\item{trait}{numeric, indicates which trait's QTL genotype to retrieve}

\item{chr}{numeric, chromosomes to retrieve, if \code{NULL}, all chromosome
are retrieved}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
list of matrices with genotypes when \code{x} is
  \code{\link{Colony-class}} (list nodes named by caste) and list of a list
  of matrices with genotypes when \code{x} is \code{\link{Colonies-class}},
  outer list is named by colony id when \code{x} is
  \code{\link{Colonies-class}}
}
\description{
Level 0 function that returns QTL genotypes of individuals in
  colony.
}
\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$addTraitA(nQtlPerChr = 10)
basePop <- newPop(founderGenomes)

drones <- createFounderDrones(pop = basePop[1], nDronesPerQueen = 10)
colony1 <- createColony(queen = basePop[2], fathers = drones[1:5])
colony2 <- createColony(queen = basePop[3], fathers = drones[6:10])
colony1 <- addWorkers(colony1, nInd = 10)
colony2 <- addWorkers(colony2, nInd = 20)
colony1 <- addDrones(colony1, nInd = 2)

getColonyQtlGeno(colony1)
getColonyQtlGeno(colony1, caste = c("queen", "fathers"))
getColonyQtlGeno(colony1, nInd = 1)
getColonyQtlGeno(colony1, nInd = list("queen" = 1, "fathers" = 2, "virgin_queens" = 1))

getColonyQtlGeno(colony2)

apiary <- c(colony1, colony2)
getColonyQtlGeno(apiary)
getColonyQtlGeno(apiary, caste = c("queen", "fathers"))
getColonyQtlGeno(apiary, nInd = 1)
getColonyQtlGeno(apiary, nInd = list("queen" = 1, "fathers" = 2, "virgin_queens" = 1))

}
\seealso{
\code{\link{getCasteQtlGeno}} and \code{\link{getQtlGeno}}
}
