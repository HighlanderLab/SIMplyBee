% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getColonyPheno}
\alias{getColonyPheno}
\title{Access phenotype values of individuals in colony}
\usage{
getColonyPheno(
  x,
  caste = c("colony", "queen", "fathers", "workers", "drones", "virginQueens"),
  nInd = NULL
)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{caste}{character, a combination of "colony", "queen", "fathers",
"workers", "drones", or "virginQueens" - obviously "colony" is not a caste,
but is a way to get colony-based phenotype such as honey-yield}

\item{nInd}{numeric, number of individuals to access, if \code{NULL} all
individuals are accessed, otherwise a random sample; can be a list to
access different number of different caste - when this is the case
\code{nInd} takes precedence over \code{caste} (see examples)}
}
\value{
list of vector of phenotype values when \code{x} is
  \code{\link{Colony-class}} (list nodes named by caste) and list of a list
  of vectors of phenotype values when \code{x} is \code{\link{MultiColony-class}},
  outer list is named by colony id when \code{x} is
  \code{\link{MultiColony-class}}
}
\description{
Level 0 function that returns phenotype values of individuals in
  a colony.
}
\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$addTraitA(nQtlPerChr = 10, var = 1)
varE <- 1

basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
droneGroups <- pullDroneGroupsFromDCA(drones, n = 10, nDrones = nFathersPoisson)

# Create a Colony and a MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, drones = droneGroups[[1]])
colony <- buildUp(x = colony, nWorkers = 6, nDrones = 3)
colony <- addVirginQueens(x = colony, nInd = 5)

apiary <- createMultiColony(basePop[3:4], n = 2)
apiary <- cross(apiary, drones = droneGroups[c(2, 3)])
apiary <- buildUp(x = apiary, nWorkers = 6, nDrones = 3)
apiary <- addVirginQueens(x = apiary, nInd = 5)

colonyPheno <- function(colony) {
 ret <- calcColonyPhenoFromCaste(colony,
                                 queenTrait = 1,
                                 workersTrait = 1)
 return(ret)
}
colony <- setColonyPheno(colony, FUN = colonyPheno, varE = varE)
apiary <- setColonyPheno(apiary, FUN = colonyPheno, varE = varE)

getColonyPheno(colony)$colony
getColonyPheno(colony)
getColonyPheno(colony, nInd = 1)
getColonyPheno(colony, caste = c("colony", "queen", "workers"))
getColonyPheno(colony, nInd = list("colony" = 1, "queen" = 1, "fathers" = 2, "virginQueens" = 1))

sapply(getColonyPheno(apiary), FUN = function(x) x$colony)
getColonyPheno(apiary)
getColonyPheno(apiary, nInd = 1)
getColonyPheno(apiary, caste = c("colony", "queen", "workers"))
getColonyPheno(apiary, nInd = list("colony" = 1, "queen" = 1, "fathers" = 2, "virginQueens" = 1))
}
\seealso{
\code{\link{gv}}
}
