% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L1_Pop.R
\name{createWorkers}
\alias{createWorkers}
\title{Creates workers from the colony}
\usage{
createWorkers(x, nInd = NULL, exact = FALSE, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{Colonies-class}}}

\item{nInd}{numeric or function, number of workers; if \code{NULL} then
\code{simParamBee$nWorkers} is used}

\item{exact}{logical, if the csd locus is turned on and exact is \code{TRUE},
replace the workers with the exact specified number of only viable workers
(heterozygous on the csd locus)}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
when \code{x} is \code{\link{Colony-class}} return is a list with two
  nodes named \code{workers} (a \code{\link{Pop-class}}) and \code{pHomBrood}
  (a numeric); when \code{x} is \code{\link{Colonies-class}} return is a list
  of lists named by colony ID
}
\description{
Level 1 function that creates the specified number of workers
  from the colony by mating the colony queen and the fathers. If csd locus is
  defined, it takes it into account and any csd homozygotes are removed and
  counted towards homozygous brood.
}
\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- newPop(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 10)
colony1 <- createColony(queen = basePop[2], fathers = drones[1:5])
colony2 <- createColony(queen = basePop[3], fathers = drones[6:10])
apiary <- c(colony1, colony2)
createWorkers(colony1, nInd = 10)
createWorkers(apiary, nInd = 10)

# Using a default in SP$nWorkers
# (just to have some virgin queens - change this to your needs!)
createWorkers(colony1)
createWorkers(apiary)

SP$nWorkers <- 15
createWorkers(colony1)
createWorkers(apiary)

nWorkersFun <- function(colony) { rpois(n = 1, lambda = 15) }
createWorkers(colony1, nInd = nWorkersFun)
createWorkers(apiary, nInd = nWorkersFun)

SP$nWorkers <- nWorkersFun
createWorkers(colony1)
createWorkers(apiary)

}
