% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L1_Pop.R
\name{createVirginQueens}
\alias{createVirginQueens}
\title{Creates virgin queens from the colony}
\usage{
createVirginQueens(
  x,
  nInd = NULL,
  year = NULL,
  editCsd = TRUE,
  csdAlleles = NULL,
  simParamBee = NULL
)
}
\arguments{
\item{x}{\code{link{MapPop-class}} or \code{\link{Colony-class}} or
\code{\link{Colonies-class}}}

\item{nInd}{numeric or function, number of virgin queens; if \code{NULL} then
\code{\link{SimParamBee}$nVirginQueens} is used; only used when \code{x} is
\code{\link{Colony-class}} or \code{\link{Colonies-class}}, when \code{x}
is \code{link{MapPop-class}} all individuals in \code{x} are converted
into virgin queens}

\item{year}{numeric, year of birth for virgin queens}

\item{editCsd}{logical (only active when \code{x} is \code{link{MapPop-class}}),
whether the csd locus should be edited to ensure heterozygosity at the csd
locus (to get viable virgin queens); see \code{csdAlleles}}

\item{csdAlleles}{\code{NULL} or list (only active when \code{x} is \code{link{MapPop-class}});
If \code{NULL}, then the function samples a heterozygous csd genotype for
each virgin queen from all possible csd alleles.
If not \code{NULL}, the user provides a list of length \code{nInd} with each
node holding a matrix or a data.frame, each having two rows and n columns.
Each row must hold one csd haplotype (allele) that will be assigned to a
virgin queen. The n columns span the length of the csd locus as specified
in \code{\link{SimParamBee}}. The two csd alleles must be different to
ensure heterozygosity at the csd locus.}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
when \code{x} is \code{link{MapPop-class}} returns
  \code{virginQueens} (a \code{\link{Pop-class}});
  when \code{x} is \code{\link{Colony-class}} returns
  \code{virginQueens} (a \code{\link{Pop-class}});
  when \code{x} is \code{\link{Colonies-class}}
  return is a named list of \code{virginQueens} (a \code{\link{Pop-class}});
  named by colony ID
}
\description{
Level 1 function that creates the specified number of virgin
  queens from the colony by mating the colony queen and the fathers. If csd
  locus is active, it takes it into account and any csd homozygotes are
  removed and counted towards homozygous brood.
}
\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackPed(isTrackPed = TRUE)
SP$setTrackRec(isTrackRec = TRUE)
# Create virgin queens from the founder population (Map-Pop object)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 10)
colony1 <- createColony(x = basePop[2])
colony1 <- crossColony(colony1, drones = drones[1:5], nFathers = 5)
colony2 <- createColony(x = basePop[3])
colony2 <- crossColony(colony2, drones = drones[6:10], nFathers = 5)
apiary <- c(colony1, colony2)

(virginQueens <- createVirginQueens(colony1, nInd = 10))
colony1@queen@id
virginQueens@id
virginQueens@sex
virginQueens@misc
virginQueens@mother
virginQueens@father
SP$pedigree
SP$recHist
SP$recHist[[23]][[1]][1]
SP$recHist[[23]][[1]][2]
SP$caste

createVirginQueens(apiary, nInd = 10)

# Using a default in SP$nVirginQueens
# (just to have some virgin queens - change this to your needs!)
createVirginQueens(colony1)
createVirginQueens(apiary)

# Specify own number
SP$nVirginQueens <- 15
createVirginQueens(colony1)
createVirginQueens(apiary)
# nVirginQueens will NOT vary between function calls when a constant is used

# Specify a function that will give a number
createVirginQueens(colony1, nInd = nVirginQueensPoisson)
createVirginQueens(apiary, nInd = nVirginQueensPoisson)
# nVirginQueens will vary between function calls when a function is used

# Store a function or a value in the SP object
SP$nVirginQueens <- nVirginQueensPoisson
createVirginQueens(colony1)
createVirginQueens(apiary)
# nVirginQueens will vary between function calls when a function is used

# csd homozygosity
founderGenomes <- quickHaplo(nInd = 100, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes, csdChr = 1, nCsdAlleles = 8)
basePop <- createVirginQueens(founderGenomes, editCsd = FALSE)
nrow(getCsdAlleles(basePop, unique = TRUE))
all(isCsdHeterozygous(basePop))

basePop <- createVirginQueens(founderGenomes, editCsd = TRUE)
nrow(getCsdAlleles(basePop, unique = TRUE))
all(isCsdHeterozygous(basePop))

}
