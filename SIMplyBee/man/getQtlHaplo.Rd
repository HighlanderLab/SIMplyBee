% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getQtlHaplo}
\alias{getQtlHaplo}
\title{Access QTL haplotypes}
\usage{
getQtlHaplo(pop, trait = 1, haplo = "all", chr = NULL, simParam = NULL)
}
\arguments{
\item{pop}{\code{\link{Pop-class}}}

\item{trait}{numeric, indicates which trait's QTL haplotypes to retrieve}

\item{haplo}{character, either "all" for all haplotypes or an integer for a
single set of haplotypes, use a value of 1 for female haplotypes and a
value of 2 for male haplotypes}

\item{chr}{numeric, chromosomes to retrieve, if \code{NULL}, all chromosome
are retrieved}

\item{simParam}{\code{\link{SimParam}}, global simulation parameters}
}
\value{
Matrix of haplotypes
}
\description{
Level 0 function that returns QTL haplotypes.
}
\details{
This is an alias for the AlphaSimR function to distinguish between getting
  and pulling
}
\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$addTraitA(10)
SP$addSnpChip(5)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 10, nFathers = nFathersPoisson)

# Create a Colony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
colony <- buildUp(x = colony)

# Use getQtlHaplo on a Population
getQtlHaplo(getWorkers(colony))
getQtlHaplo(getQueen(colony))
}
\seealso{
\code{\link{pullQtlHaplo}}
}
