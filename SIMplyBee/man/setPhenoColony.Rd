% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L2_Colony.R
\name{setPhenoColony}
\alias{setPhenoColony}
\title{Set colony phenotype}
\usage{
setPhenoColony(colony, colonyFUN = NULL, ..., simParamBee = NULL)
}
\arguments{
\item{colony}{\code{\link{Colony-class}}}

\item{colonyFUN}{function, any function that can be run on \code{colony} and
returns colony phenotypes; if \code{NULL} then
\code{\link{SimParamBee}$phenoColony} is used - if even this is \code{NULL},
then colony phenotype is not set, but phenotypes of colony individuals are}

\item{...}{all arguments of \code{\link{setPheno}} and \code{colonyFUN}}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
\code{\link{Colony-class}} with phenotypes
}
\description{
Level 2 function that sets phenotypes for all colony individuals
  (queen, workers, drones, and virgin queens) and for the colony.
}
\details{
When this function is called on a colony, phenotypes for all colony
  individuals is set or reset if phenotypes already exist.
}
\examples{
founderGenomes <- quickHaplo(nInd = 2, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)

# Define two traits that collectively affect colony honey yield:
# 1) queen's effect on colony honey yield
# 2) workers' effect on colony honey yield
# The traits will have negative genetic correlation and heritability of 0.25
meanP <- c(20, 0)
varA <- c(1, 1 / 10)
corA <- matrix(data = c( 1.0, -0.5,
                        -0.5,  1.0), nrow = 2, byrow = TRUE)
varE <- c(3, 3 / 10)
varA / (varA + varE)
SP$addTraitA(nQtlPerChr = 100, mean = meanP, var = varA, corA = corA)
SP$setVarE(varE = varE)

basePop <- createVirginQueens(founderGenomes)
drones <- createDrones(x = basePop[1], nInd = 5)
colony <- createColony(x = basePop[2])
colony <- crossColony(colony, drones = drones, nFathers = 5)
colony <- buildUpColony(colony, nWorkers = 10)

# Set phenotypes for all colony individuals
colony <- setPhenoColony(colony)

# Queen's phenotype for both traits
pheno(getQueen(colony))
# TODO: use getQueensPheno(colony, caste = "queen")
#       https://github.com/HighlanderLab/SIMplyBee/issues/26

# Workers' phenotype for both traits
pheno(getWorkers(colony))
# TODO: use getWorkersPheno(colony, caste = "queen")
#       https://github.com/HighlanderLab/SIMplyBee/issues/26

# TODO: use getColonyPheno(colony) for all individuals
#       https://github.com/HighlanderLab/SIMplyBee/issues/26

# Set phenotypes for all colony individuals AND colony
colony <- setPhenoColony(colony, colonyFUN = phenoQueenPlusSumOfWorkers)
pheno(colony)
# TODO: use getColonyPheno(colony) for all individuals and/or colony
#       https://github.com/HighlanderLab/SIMplyBee/issues/26

# Set phenotypes for ... - store the colony function into the SP object
SP$phenoColony <- phenoQueenPlusSumOfWorkers
pheno(setPhenoColony(colony))
pheno(setPhenoColony(colony))
# phenotype will vary between function calls

# TODO:
# See
#     https://github.com/HighlanderLab/SIMplyBee/issues/26
#     https://github.com/HighlanderLab/SIMplyBee/issues/28
#     https://github.com/HighlanderLab/SIMplyBee/issues/32
}
