% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class-SimParamBee.R
\name{calcColonyValueFromCaste}
\alias{calcColonyValueFromCaste}
\alias{calcColonyPhenoFromCaste}
\alias{calcColonyGvFromCaste}
\alias{calcColonyBvFromCaste}
\alias{calcColonyDdFromCaste}
\alias{calcColonyAaFromCaste}
\title{Calculate colony value from caste individuals' values}
\usage{
calcColonyValueFromCaste(
  colony,
  value = "pheno",
  queenTrait = 1,
  queenFUN = function(x) x,
  workersTrait = 2,
  workersFUN = sum,
  dronesTrait = NULL,
  dronesFUN = NULL,
  combineFUN = function(q, w, d) q + w,
  checkProduction = TRUE,
  checkProductionFALSEValue = 0,
  simParamBee = NULL
)

calcColonyPhenoFromCaste(colony, simParamBee = NULL, ...)

calcColonyGvFromCaste(colony, checkProduction = FALSE, simParamBee = NULL, ...)

calcColonyBvFromCaste(colony, checkProduction = FALSE, simParamBee = NULL, ...)

calcColonyDdFromCaste(colony, checkProduction = FALSE, simParamBee = NULL, ...)

calcColonyAaFromCaste(colony, checkProduction = FALSE, simParamBee = NULL, ...)
}
\arguments{
\item{colony}{\code{\link{Colony-class}}}

\item{value}{character, one of \code{pheno}, \code{gv}, \code{bv}, \code{dd},
or \code{aa}}

\item{queenTrait}{numeric, trait that represents queen's effect on the colony
value (defined in \code{\link{SimParamBee}} - see examples); if
\code{NULL} then this effect is 0}

\item{queenFUN}{function, function that will be applied to the queen value}

\item{workersTrait}{numeric, trait that represents workers' effect on the colony
value (defined in \code{\link{SimParamBee}} - see examples); if
\code{NULL} then this effect is 0}

\item{workersFUN}{function, function that will be applied to the worker values}

\item{dronesTrait}{numeric, trait that represents drones' effect on the colony
value (defined in \code{\link{SimParamBee}} - see examples); if
\code{NULL} then this effect is 0}

\item{dronesFUN}{function, function that will be applied to the drone values}

\item{combineFUN, }{function that will combine the queen, worker, and drone effects
- the function expects that this function is defined as \code{function(q, w, d)}
where \code{q} represents queen's effect, \code{q} represents workers' effect,
\code{d} represents drones' effect}

\item{checkProduction}{logical, does the value depend on the production
status of colony; if yes and production is not \code{TRUE}, the result is
a 0}

\item{checkProductionFALSEValue}{scalar, value used when colony is not productive}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}

\item{...}{other arguments of \code{calcColonyValueFromCaste}}
}
\value{
numeric matrix with a row of values
}
\description{
Calculate colony value from caste individuals' values - can be
  used as \code{FUN} argument in \code{\link{calcColonyValue}} functions. It
  can also be saved in \code{SimParamBee$calcColonyValue}.

  This is just an example - quite flexible one, though;) You can provide your
  own "caste functions" that satisfy your needs within this function (see below)
  or provide a complete replacement of this function! For example, this function
  does not cater for indirect (social) genetic effects where colony individuals
  genetic value impacts phenotype value of other colony individuals. Note though
  that you can achieve this also via multiple correlated traits, such as a queen
  and a workers trait.
}
\details{
This function works on a single colony! If you want to apply it on
  a collection of colonies, such as apiary, use \code{\link{calcColonyValue}}.
}
\section{Functions}{
\itemize{
\item \code{calcColonyPhenoFromCaste()}: Calculate colony phenotype value from caste individuals' phenotype values

\item \code{calcColonyGvFromCaste()}: Calculate colony genetic value from caste individuals' genetic values

\item \code{calcColonyBvFromCaste()}: Calculate colony breeding value from caste individuals' breeding values

\item \code{calcColonyDdFromCaste()}: Calculate colony dominance deviation from caste individuals' dominance deviations

\item \code{calcColonyAaFromCaste()}: Calculate colony epistasis deviation from caste individuals' epistasis deviations

}}
\examples{
founderGenomes <- quickHaplo(nInd = 5, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)

# Define two traits that collectively affect colony honey yield:
# 1) queen's effect on colony honey yield, say via pheromone secretion phenotype
# 2) workers' effect on colony honey yield, say via foraging ability phenotype
# The traits will have a negative genetic correlation of -0.5 and heritability
# of 0.25 (on an individual level)
mean <- c(20, 0)
nWorkers <- 10
varA <- c(1, 1 / nWorkers)
corA <- matrix(data = c(
  1.0, -0.5,
  -0.5, 1.0
), nrow = 2, byrow = TRUE)
varE <- c(3, 3 / nWorkers)
varA / (varA + varE)
SP$addTraitADE(nQtlPerChr = 100,
               mean = mean,
               var = varA, corA = corA,
               meanDD = 0.1, varDD = 0.2, corD = corA,
               relAA = 0.1, corAA = corA)
SP$setVarE(varE = varE)

basePop <- createVirginQueens(founderGenomes)
drones <- createDrones(x = basePop[1], nInd = 10)
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = drones)
colony <- buildUp(colony, nWorkers = nWorkers, nDrones = 3)

# Colony value
calcColonyPhenoFromCaste(colony)
calcColonyGvFromCaste(colony)
# TODO: Uncomment getQueenBv() with nTrait>1 once AlphaSimR bug is solved
#   https://github.com/gaynorr/AlphaSimR/issues/83
#   https://github.com/HighlanderLab/SIMplyBee/issues/399
# calcColonyBvFromCaste(colony)
# calcColonyBvFromCaste(colony)

# To understand where the above values come from, study the contents of
# calcColonyValueFromCaste() and the below values:

# Phenotype values
getQueenPheno(colony)
getWorkersPheno(colony)

# Genetic values
getQueenGv(colony)
getWorkersGv(colony)

# Breeding values
# TODO: Uncomment getQueenBv() with nTrait>1 once AlphaSimR bug is solved
#   https://github.com/gaynorr/AlphaSimR/issues/83
#   https://github.com/HighlanderLab/SIMplyBee/issues/399
# getQueenBv(colony)
getWorkersBv(colony)

# Dominance deviations
# TODO: Uncomment getQueenBv() with nTrait>1 once AlphaSimR bug is solved
#   https://github.com/gaynorr/AlphaSimR/issues/83
#   https://github.com/HighlanderLab/SIMplyBee/issues/399
# getQueenDd(colony)
getWorkersDd(colony)

# Epistasis deviations
# TODO: Uncomment getQueenBv() with nTrait>1 once AlphaSimR bug is solved
#   https://github.com/gaynorr/AlphaSimR/issues/83
#   https://github.com/HighlanderLab/SIMplyBee/issues/399
# getQueenAa(colony)
getWorkersAa(colony)

}
\seealso{
\code{\link{SimParamBee}} field \code{calcColonyValue} and functions
  \code{\link{calcColonyPheno}}, \code{\link{calcColonyGv}},
  \code{\link{calcColonyBv}}, \code{\link{calcColonyDd}},
  \code{\link{calcColonyAa}}, \code{\link{getEvents}},
  \code{\link{pheno}}, \code{\link{gv}}, \code{\link{bv}}, \code{\link{dd}},
  and \code{\link{aa}}
}
