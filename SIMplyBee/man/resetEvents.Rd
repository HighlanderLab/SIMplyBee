% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L2_Colony.R
\name{resetEvents}
\alias{resetEvents}
\title{Reset colony events}
\usage{
resetEvents(x, collapse = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{Colonies-class}}}

\item{collapse}{logical, reset the collapse event (only sensible in setting
up a new colony, which the default of \code{NULL} caters for; otherwise, a
collapsed colony should be left collapsed forever, unless you force
resetting this event with \code{collapse = TRUE})}
}
\value{
\code{\link{Colony-class}} or \code{\link{Colonies-class}} with
  events reset
}
\description{
Level 2 function that resets the slots swarm, split,
  supersedure, collapsed, and production to FALSE. Useful at the end of a
  yearly cycle to reset the events, allowing the user to track new events in
  a new year.
}
\examples{
founderGenomes <- quickHaplo(nInd = 5, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 100)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 5, nFathers = nFathersPoisson)

# Create and cross Colony and MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
apiary <- createColonies(basePop[4:5], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[3:4])

# Build-up - this sets Productive to TRUE
(colony1 <- buildUp(colony1, nWorkers = 100))
isProductive(colony1)
resetEvents(colony1)

apiary <- buildUp(apiary, nWorkers = 100)
isProductive(apiary[[1]])
resetEvents(apiary)[[1]]

# Split - this sets Split to TRUE
tmp <- split(colony1)
(split <- tmp$split)
hasSplit(split)
resetEvents(split)
(remnant <- tmp$remnant)
hasSplit(remnant)
resetEvents(remnant)

tmp <- split(apiary)
(splits <- tmp$splits)
hasSplit(splits[[1]])
resetEvents(splits)[[1]]
(remnants <- tmp$remnants)
hasSplit(remnants[[1]])
resetEvents(remnants)[[1]]

# Swarm - this sets Swarm to TRUE
tmp <- swarm(colony1)
(swarm <- tmp$swarm)
hasSwarmed(swarm)
resetEvents(swarm)
(remnant <- tmp$remnant)
hasSwarmed(remnant)
resetEvents(remnant)

tmp <- swarm(apiary)
(swarms <- tmp$swarms)
hasSwarmed(swarms[[1]])
resetEvents(swarms)[[1]]
(remnants <- tmp$remnants)
hasSwarmed(remnants[[1]])
resetEvents(remnants)[[1]]

# Supersede - this sets Supersede to TRUE
(tmp <- supersede(colony1))
hasSuperseded(tmp)
resetEvents(tmp)

(tmp <- supersede(apiary))
hasSuperseded(tmp[[1]])
resetEvents(tmp)[[1]]

# Collapse - this sets Collapse to TRUE
(tmp <- collapse(colony1))
hasCollapsed(tmp)
resetEvents(tmp)
resetEvents(tmp, collapse = TRUE)

(tmp <- collapse(apiary))
hasCollapsed(tmp[[1]])
resetEvents(tmp)[[1]]
resetEvents(tmp, collapse = TRUE)[[1]]

}
