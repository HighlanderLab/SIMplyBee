% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class-SimParamBee.R
\name{calcColonyValueFromCaste}
\alias{calcColonyValueFromCaste}
\alias{calcColonyPhenoFromCaste}
\alias{calcColonyGvFromCaste}
\alias{calcColonyBvFromCaste}
\alias{calcColonyDdFromCaste}
\alias{calcColonyAaFromCaste}
\title{Calculate colony value from caste values}
\usage{
calcColonyValueFromCaste(
  colony,
  value = "pheno",
  queenTrait = 1,
  queenFUN = function(x) x,
  workersTrait = 2,
  workersFUN = sum,
  dronesTrait = NULL,
  dronesFUN = NULL,
  combineFUN = function(q, w, d) q + w,
  checkProduction = TRUE,
  simParamBee = NULL
)

calcColonyPhenoFromCaste(colony, ..., simParamBee = NULL)

calcColonyGvFromCaste(colony, ..., simParamBee = NULL)

calcColonyBvFromCaste(colony, ..., simParamBee = NULL)

calcColonyDdFromCaste(colony, ..., simParamBee = NULL)

calcColonyAaFromCaste(colony, ..., simParamBee = NULL)
}
\arguments{
\item{colony}{\code{\link{Colony-class}}}

\item{value}{character, one of \code{pheno}, \code{gv}, \code{bv}, \code{dd},
or \code{aa}}

\item{queenTrait}{numeric, trait that represents queen's effect on the colony
value (defined in \code{\link{SimParamBee}} - see examples); if
\code{NULL} then this effect is 0}

\item{queenFUN}{function, function that will be applied to the queen value}

\item{workersTrait}{numeric, trait that represents workers' effect on the colony
value (defined in \code{\link{SimParamBee}} - see examples); if
\code{NULL} then this effect is 0}

\item{workersFUN}{function, function that will be applied to the worker values}

\item{dronesTrait}{numeric, trait that represents drones' effect on the colony
value (defined in \code{\link{SimParamBee}} - see examples); if
\code{NULL} then this effect is 0}

\item{dronesFUN}{function, function that will be applied to the drone values}

\item{combineFUN, }{function that will combine the queen, worker, and drone effects
- the function expects that this function is defined as \code{function(q, w, d)}
where \code{q} represents queen's effect, \code{q} represents workers' effect,
\code{d} represents drones' effect}

\item{checkProduction}{logical, does the value depend on the production
status of colony; if yes and production is not \code{TRUE}, the result is
a 0}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
numeric matrix with a single value
}
\description{
Calculate colony value from caste values -
  used when \code{FUN = NULL} in \code{\link{setColonyValue}} but
  \code{SimParamBee$colonyValue} is set, where value can be phenotype (pheno),
  or genetic value (gv, bv, dd, and aa).

  This is just an example - quite flexible one, though;) You can provide your
  own functions that satisfy your needs!
}
\section{Functions}{
\itemize{
\item \code{calcColonyPhenoFromCaste()}: Calculate colony phenotype value from caste phenotype values

\item \code{calcColonyGvFromCaste()}: Calculate colony genetic value from caste genetic values

\item \code{calcColonyBvFromCaste()}: Calculate colony breeding value from caste breeding values

\item \code{calcColonyDdFromCaste()}: Calculate colony dominance deviation from caste dominance deviations

\item \code{calcColonyAaFromCaste()}: Calculate colony epistasis deviation from caste epistasis deviations

}}
\examples{
founderGenomes <- quickHaplo(nInd = 5, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)

# Define two traits that collectively affect colony honey yield:
# 1) queen's effect on colony honey yield, say via pheromone secretion phenotype
# 2) workers' effect on colony honey yield, say via foraging phenotype
# The traits will have a negative genetic correlation of -0.5 and heritability
# of 0.25 (on an individual level)
meanP <- c(20, 0)
nWorkers <- 10
varA <- c(1, 1 / nWorkers)
corA <- matrix(data = c(
  1.0, -0.5,
  -0.5, 1.0
), nrow = 2, byrow = TRUE)
varE <- c(3, 3 / nWorkers)
varA / (varA + varE)
SP$addTraitADE(nQtlPerChr = 100,
               mean = meanP,
               var = varA, corA = corA,
               meanDD = 0.1, varDD = 0.2, corD = corA,
               relAA = 0.1, corAA = corA)

basePop <- createVirginQueens(founderGenomes)
drones <- createDrones(x = basePop[1], nInd = 100)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 5, nFathers = 14)

# Create and cross Colony and MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
colony <- buildUp(colony, nWorkers = nWorkers, nDrones = 3)
apiary <- createMultiColony(basePop[3:5], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[c(2, 3)])
apiary <- buildUp(apiary, nWorkers = nWorkers, nDrones = 3)

# Set phenotypes for all colony individuals
colony <- setColonyPheno(colony, varE = varE)
colony <- setColonyGv(colony)
colony <- setColonyBv(colony)
colony <- setColonyDd(colony)
colony <- setColonyAa(colony)

apiary <- setColonyPheno(apiary, varE = varE)
colony <- setColonyGv(apiary)
colony <- setColonyBv(apiary)
colony <- setColonyDd(apiary)
colony <- setColonyAa(apiary)

# Queen's phenotype for both traits
getQueenPheno(colony)
getQueenPheno(apiary)

# Workers' phenotype for both traits
getWorkersPheno(colony)
getWorkersPheno(apiary)

# For the whole colony
getColonyPheno(colony)
getColonyPheno(apiary)

# Set phenotypes for all colony individuals AND Colony
colony <- setColonyPheno(colony, FUN = calcColonyPhenoFromCaste, varE = varE)
getColonyPheno(colony)$colony

# Set phenotypes for all colony individuals AND MultiColony
apiary <- setColonyPheno(apiary, FUN = calcColonyPhenoFromCaste, varE = varE)
sapply(X = getColonyPheno(apiary), FUN = function(x) x$colony)

# Colony phenotype - store the colony function into the SP object
SP$colonyPheno <- calcColonyPhenoFromCaste
getColonyPheno(setColonyPheno(colony, varE = varE))$colony
getColonyPheno(setColonyPheno(colony, varE = varE))$colony
sapply(X = getColonyPheno(setColonyPheno(apiary, varE = varE)), FUN = function(x) x$colony)
sapply(X = getColonyPheno(setColonyPheno(apiary, varE = varE)), FUN = function(x) x$colony)

}
\seealso{
\code{\link{SimParamBee}} fields \code{colonyPheno}, \code{colonyGv},
  \code{colonyBv}, \code{colonyDd}, \code{colonyAa} and functions
  \code{\link{setColonyPheno}}, \code{\link{setColonyGv}},
  \code{\link{setColonyBv}}, \code{\link{setColonyDd}},
  \code{\link{setColonyAa}}, \code{\link{getEvents}},
  \code{\link{pheno}}, \code{\link{gv}}, \code{\link{bv}}, \code{\link{dd}},
  and \code{\link{aa}}
}
