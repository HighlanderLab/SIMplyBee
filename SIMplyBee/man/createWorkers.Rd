% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L1_Pop.R
\name{createWorkers}
\alias{createWorkers}
\title{Creates workers from the colony}
\usage{
createWorkers(x, nInd = NULL, exact = FALSE, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{Colonies-class}}}

\item{nInd}{numeric or function, number of workers created; if \code{NULL}
then \code{\link{SimParamBee}$nWorkers} is used}

\item{exact}{logical, if the csd locus is active and exact is \code{TRUE},
create the exactly specified number of viable workers (heterozygous on the
csd locus)}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
when \code{x} is \code{\link{Colony-class}} return is a list with two
  nodes named \code{workers} (a \code{\link{Pop-class}}) and \code{nHomBrood}
  (a numeric); when \code{x} is \code{\link{Colonies-class}} return is a list
  of lists named by colony ID
}
\description{
Level 1 function that creates the specified number of workers
  from the colony by mating the colony queen and the fathers. If csd locus is
  active, it takes it into account and any csd homozygotes are removed and
  counted towards homozygous brood.
}
\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackRec(TRUE)
SP$setTrackPed(isTrackPed = TRUE)
SP$addTraitA(10)
SP$addSnpChip(5)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 10, nFathers = nFathersPoisson)

# Create a Colony and a MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
apiary <- createColonies(basePop[3:4], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[c(2,3)])

(tmp <- createWorkers(colony, nInd = 10))
colony@queen@id
tmp$workers@id
tmp$workers@sex
tmp$workers@misc
tmp$workers@mother
tmp$workers@father
SP$pedigree
head(SP$recHist)
head(SP$recHist[[23]][[1]][1])
head(SP$recHist[[23]][[1]][2])
head(SP$caste)

createWorkers(apiary, nInd = 10)
# Using a default in SP$nWorkers
# (just to have some workers - change this to your needs!)
createWorkers(colony)
createWorkers(apiary)

# Specify own number
SP$nWorkers <- 15
createWorkers(colony)
createWorkers(apiary)
# nWorkers will NOT vary between function calls when a constant is used

# Specify a function that will give a number
createWorkers(colony, nInd = nWorkersPoisson)
createWorkers(apiary, nInd = nWorkersPoisson)
# nWorkers will vary between function calls when a function is used

# Store a function or a value in the SP object
SP$nWorkers <- nWorkersPoisson
createWorkers(colony)
createWorkers(apiary)
# nWorkers will vary between function calls when a function is used

# Inbred virgin queen with her brothers to generate csd homozygous brood
colony2 <- createColony(createVirginQueens(colony, nInd = 1))
colony2 <- cross(x = colony2, fathers = createDrones(colony, nInd = 15))
# Check the expected csd homozygosity
pHomBrood(colony2)

# Evaluate a realised csd homozygosity
createWorkers(colony2, nInd = 100)
# nHomBrood will vary between function calls due to inheritance process
createWorkers(colony2, nInd = 100)
# nHomBrood will vary between function calls due to inheritance process
}
