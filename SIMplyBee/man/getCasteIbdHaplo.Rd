% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getCasteIbdHaplo}
\alias{getCasteIbdHaplo}
\alias{getQueensIbdHaplo}
\alias{getFathersIbdHaplo}
\alias{getVirginQueensIbdHaplo}
\alias{getWorkersIbdHaplo}
\alias{getDronesIbdHaplo}
\title{Access IBD haplotypes of individuals in a caste}
\usage{
getCasteIbdHaplo(x, caste, nInd = NULL, chr = NULL, simParamBee = NULL)

getQueensIbdHaplo(x, chr = NULL, simParamBee = NULL)

getFathersIbdHaplo(x, nInd = NULL, chr = NULL, simParamBee = NULL)

getVirginQueensIbdHaplo(x, nInd = NULL, chr = NULL, simParamBee = NULL)

getWorkersIbdHaplo(x, nInd = NULL, chr = NULL, simParamBee = NULL)

getDronesIbdHaplo(x, nInd = NULL, chr = NULL, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{Colonies-class}}}

\item{caste}{character, "queen", "fathers", "virginQueens", "workers", or
"drones"}

\item{nInd}{numeric, number of individuals to access, if \code{NULL} all
individuals are accessed, otherwise a random sample}

\item{chr}{numeric, chromosomes to retrieve, if \code{NULL}, all chromosome
are retrieved}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
matrix with haplotypes when \code{x} is \code{\link{Colony-class}}
  and list of matrices with haplotypes when \code{x} is
  \code{\link{Colonies-class}}, named by colony id when \code{x} is
  \code{\link{Colonies-class}}
}
\description{
Level 0 function that returns IBD (identity by descent)
  haplotypes of individuals in a caste.
}
\section{Functions}{
\itemize{
\item \code{getQueensIbdHaplo}: Access IBD haplotype data of the queen

\item \code{getFathersIbdHaplo}: Access IBD haplotype data of fathers

\item \code{getVirginQueensIbdHaplo}: Access IBD haplotype data of virgin queens

\item \code{getWorkersIbdHaplo}: Access IBD haplotype data of workers

\item \code{getDronesIbdHaplo}: Access IBD haplotype data of drones
}}

\examples{
if (FALSE) {
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParam$new(founderGenomes)
SP$setTrackRec(isTrackRec = TRUE)
basePop <- newPop(founderGenomes)

drones <- createDrones(x = basePop[1], nDronesPerQueen = 10)
colony1 <- createColony(queen = basePop[2], fathers = drones[1:5])
colony2 <- createColony(queen = basePop[3], fathers = drones[6:10])
colony1 <- addWorkers(colony1, nInd = 10)
colony2 <- addWorkers(colony2, nInd = 20)
colony1 <- addDrones(colony1, nInd = 2)
colony2 <- addDrones(colony2, nInd = 4)

getCasteIbdHaplo(colony1, caste = "queen")
getQueensIbdHaplo(colony1)

getCasteIbdHaplo(colony1, caste = "fathers")
getCasteIbdHaplo(colony1, caste = "fathers", nInd = 2)
getCasteIbdHaplo(colony1, caste = "fathers", nInd = 2)
getFathersIbdHaplo(colony1)
getFathersIbdHaplo(colony1, nInd = 2)

getCasteIbdHaplo(colony1, caste = "virginQueens")
getVirginQueensIbdHaplo(colony1)

getCasteIbdHaplo(colony1, caste = "workers")
getWorkersIbdHaplo(colony1)

getCasteIbdHaplo(colony1, caste = "drones")
getDronesIbdHaplo(colony1)

apiary <- c(colony1, colony2)
getCasteIbdHaplo(apiary, caste = "queen")
getQueensIbdHaplo(apiary)

getCasteIbdHaplo(apiary, caste = "fathers")
getCasteIbdHaplo(apiary, caste = "fathers", nInd = 2)
getCasteIbdHaplo(apiary, caste = "fathers", nInd = 2)
getFathersIbdHaplo(apiary)
getFathersIbdHaplo(apiary, nInd = 2)

getCasteIbdHaplo(apiary, caste = "virginQueens")
getVirginQueensIbdHaplo(apiary)

getCasteIbdHaplo(apiary, caste = "workers")
getWorkersIbdHaplo(apiary)

getCasteIbdHaplo(apiary, caste = "drones")
getDronesIbdHaplo(apiary)
}
}
\seealso{
\code{\link{getIbdHaplo}} and \code{\link{pullIbdHaplo}}
}
