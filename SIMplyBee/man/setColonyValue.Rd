% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L2_Colony.R
\name{setColonyValue}
\alias{setColonyValue}
\alias{setColonyPheno}
\alias{setColonyGv}
\alias{setColonyBv}
\alias{setColonyDd}
\alias{setColonyAa}
\title{Set colony value}
\usage{
setColonyValue(
  x,
  value = "pheno",
  FUN = NULL,
  reset = TRUE,
  simParamBee = NULL,
  ...
)

setColonyPheno(x, ..., simParamBee = NULL)

setColonyGv(x, ..., simParamBee = NULL)

setColonyBv(x, ..., simParamBee = NULL)

setColonyDd(x, ..., simParamBee = NULL)

setColonyAa(x, ..., simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{value}{character, one of \code{pheno}, \code{gv}, \code{bv}, \code{dd},
or \code{aa}}

\item{FUN}{function, any function that can be run on \code{colony} and
returns colony values; if \code{NULL} then
\code{\link{SimParamBee}$colonyValue} (Value being one of \code{value}) is
used - if even this is \code{NULL}, then colony value is not set, but
values of colony individuals are if \code{value = "pheno"} (see \code{reset}
though!)}

\item{reset}{logical, should previous phenotype values for individuals in the
castes be used or sampled anew? Active only with \code{value = "pheno"}.}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}

\item{...}{arguments passed to \code{\link{setPheno}} when \code{value = "pheno"}}
}
\value{
\code{\link{Colony-class}} or \code{\link{MultiColony-class}} with phenotypes
}
\description{
Level 2 function that sets value for all colony individuals
  (queen, workers, drones, and virgin queens) and for the colony, or each
  colony in a MultiColony object.
}
\details{
When this function is called on a colony and \code{value = "pheno"},
  phenotypes for all colony individuals and possibly the whole colony are set
  (or reset if phenotypes already exist). When \code{value != "pheno"} then
  only colony value is set.
}
\section{Functions}{
\itemize{
\item \code{setColonyPheno()}: Set colony phenotype value

\item \code{setColonyGv()}: Set colony genetic value

\item \code{setColonyBv()}: Set colony breeding value

\item \code{setColonyDd()}: Set colony dominance deviation

\item \code{setColonyAa()}: Set colony epistasis deviation

}}
\examples{
founderGenomes <- quickHaplo(nInd = 5, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)

# Define two traits that collectively affect colony honey yield:
# 1) queen's effect on colony honey yield, say via pheromone secretion phenotype
# 2) workers' effect on colony honey yield, say via foraging phenotype
# The traits will have a negative genetic correlation of -0.5 and heritability
# of 0.25 (on an individual level)
meanP <- c(20, 0)
nWorkers <- 10
varA <- c(1, 1 / nWorkers)
corA <- matrix(data = c(
  1.0, -0.5,
  -0.5, 1.0
), nrow = 2, byrow = TRUE)
varE <- c(3, 3 / nWorkers)
varA / (varA + varE)
SP$addTraitADE(nQtlPerChr = 100,
               mean = meanP,
               var = varA, corA = corA,
               meanDD = 0.1, varDD = 0.2, corD = corA,
               relAA = 0.1, corAA = corA)

basePop <- createVirginQueens(founderGenomes)
drones <- createDrones(x = basePop[1], nInd = 100)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 5, nFathers = 14)

# Create and cross Colony and MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
colony <- buildUp(colony, nWorkers = nWorkers, nDrones = 3)
apiary <- createMultiColony(basePop[3:5], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[c(2, 3)])
apiary <- buildUp(apiary, nWorkers = nWorkers, nDrones = 3)

# ---- Phenotype values (for individuals and colony) ----

# Set phenotypes for all colony individuals
colony <- setColonyPheno(colony, varE = varE)
apiary <- setColonyPheno(apiary, varE = varE)

# Queen's phenotype for both traits
getQueenPheno(colony)
getQueenPheno(apiary)

# Workers' phenotype for both traits
getWorkersPheno(colony)
getWorkersPheno(apiary)

# For the whole colony
getColonyPheno(colony)
getColonyPheno(apiary)

# Set phenotypes for all colony individuals AND Colony
colony <- setColonyPheno(colony, FUN = calcColonyPhenoFromCaste, varE = varE)
getColonyPheno(colony)$colony

# Set phenotypes for all colony individuals AND MultiColony
apiary <- setColonyPheno(apiary, FUN = calcColonyPhenoFromCaste, varE = varE)
sapply(X = getColonyPheno(apiary), FUN = function(x) x$colony)

# Colony phenotype - store the colony function into the SP object
SP$colonyPheno <- calcColonyPhenoFromCaste
getColonyPheno(setColonyPheno(colony, varE = varE))$colony
getColonyPheno(setColonyPheno(colony, varE = varE))$colony
sapply(X = getColonyPheno(setColonyPheno(apiary, varE = varE)), FUN = function(x) x$colony)
sapply(X = getColonyPheno(setColonyPheno(apiary, varE = varE)), FUN = function(x) x$colony)
# phenotype will vary between function calls by default (see reset)

# ---- Genetic values (only for whole colony) ----

getColonyGv(colony)$colony
colony <- setColonyGv(colony, FUN = calcColonyGvFromCaste)
getColonyGv(colony)$colony

sapply(X = getColonyGv(apiary), FUN = function(x) x$colony)
apiary <- setColonyGv(apiary, FUN = calcColonyGvFromCaste)
sapply(X = getColonyGv(apiary), FUN = function(x) x$colony)

getColonyBv(colony)$colony
colony <- setColonyBv(colony, FUN = calcColonyBvFromCaste)
getColonyBv(colony)$colony

sapply(X = getColonyBv(apiary), FUN = function(x) x$colony)
apiary <- setColonyBv(apiary, FUN = calcColonyBvFromCaste)
sapply(X = getColonyBv(apiary), FUN = function(x) x$colony)
}
\seealso{
\code{\link{calcColonyValueFromCaste}} as an example for \code{FUN},
  \code{\link{setPheno}} for the basic population phenotyping, and
  \code{\link{pheno}}, \code{\link{gv}}, \code{\link{bv}}, \code{\link{dd}},
  and \code{\link{aa}} for population values.
}
