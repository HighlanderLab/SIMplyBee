% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class-Colonies.R, R/Class-Colony.R
\docType{class}
\name{Colonies-class}
\alias{Colonies-class}
\alias{isColonies}
\alias{show,Colonies-method}
\alias{c,Colonies-method}
\alias{c,ColoniesOrNULL-method}
\alias{[,Colonies,integerOrNumericOrLogical,ANY,ANY-method}
\alias{[,Colonies,character,ANY,ANY-method}
\alias{[[,Colonies,integerOrNumericOrLogical-method}
\alias{[[,Colonies,character-method}
\alias{[<-,Colonies,integerOrNumericOrLogicalOrCharacter,ANY,Colonies-method}
\alias{[[<-,Colonies,integerOrNumericOrLogicalOrCharacter,ANY,Colony-method}
\title{Honeybee colonies}
\usage{
isColonies(x)

\S4method{show}{Colonies}(object)

\S4method{c}{Colonies}(x, ...)

\S4method{c}{ColoniesOrNULL}(x, ...)

\S4method{[}{Colonies,integerOrNumericOrLogical,ANY,ANY}(x, i, j, drop)

\S4method{[}{Colonies,character,ANY,ANY}(x, i, j, drop)

\S4method{[[}{Colonies,integerOrNumericOrLogical}(x, i)

\S4method{[[}{Colonies,character}(x, i)

\S4method{[}{Colonies,integerOrNumericOrLogicalOrCharacter,ANY,Colonies}(x, i, j) <- value

\S4method{[[}{Colonies,integerOrNumericOrLogicalOrCharacter,ANY,Colony}(x, i, j) <- value
}
\arguments{
\item{x}{\code{\link{Colonies-class}}}

\item{object}{\code{\link{Colonies-class}}}

\item{...}{\code{NULL}, \code{\link{Colony-class}}, or
\code{\link{Colonies-class}}}

\item{i}{integer, numeric, logical, or character, index or ID to select
a colony (see examples)}

\item{j}{not used}

\item{drop}{not used}

\item{value}{\code{\link{Colony-class}} or \code{\link{Colonies-class}} to
assign into \code{x} based on colony index or name \code{i}}
}
\value{
\code{\link{Colonies-class}} or \code{\link{Colony-class}}
}
\description{
An object holding a collection of honeybee colonies. It behaves
  like a list.
}
\section{Functions}{
\itemize{
\item \code{isColonies}: Test if x is a Colonies class object

\item \code{show,Colonies-method}: Show colonies object

\item \code{c,Colonies-method}: Combine multiple colony and colonies objects

\item \code{c,ColoniesOrNULL-method}: Combine multiple colony and colonies objects

\item \code{[,Colonies,integerOrNumericOrLogical,ANY,ANY-method}: Extract a colony (one or more!) with an integer/numeric/logical index (position) (return \code{\link{Colonies-class}})

\item \code{[,Colonies,character,ANY,ANY-method}: Extract a colony (one or more!) with a character ID (name) (return \code{\link{Colonies-class}})

\item \code{[[,Colonies,integerOrNumericOrLogical-method}: Extract a colony (just one!) with an integer/numeric/logical index (position) (return \code{\link{Colony-class}})

\item \code{[[,Colonies,character-method}: Extract a colony (just one!) with a character ID (name) (return \code{\link{Colony-class}})

\item \code{[<-,Colonies,integerOrNumericOrLogicalOrCharacter,ANY,Colonies-method}: Assign colonies into colonies

\item \code{[[<-,Colonies,integerOrNumericOrLogicalOrCharacter,ANY,Colony-method}: Assign colony into colonies
}}

\section{Slots}{

\describe{
\item{\code{colonies}}{list, a collection of \code{\link{Colony-class}} objects}
}}

\examples{
founderGenomes <- quickHaplo(nInd = 6, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 25)
colony1 <- createColony(queen = basePop[2], fathers = drones[1:5])
colony2 <- createColony(queen = basePop[3], fathers = drones[6:10])
colony3 <- createColony(queen = basePop[4], fathers = drones[11:15])
colony4 <- createColony(queen = basePop[5], fathers = drones[16:20])
colony5 <- createColony(queen = basePop[6], fathers = drones[21:25])
apiary <- c(colony1, colony2, colony3, colony4, colony5)
apiary
show(apiary)
is(apiary)
isColonies(apiary)

getId(apiary)
apiary[1]
getId(apiary[1])
getId(apiary["2"])
getId(apiary[2])
getId(apiary[-1])
getId(apiary[5])

getId(apiary)
getId(apiary[c(1, 3)])
getId(apiary[c("2", "4")])
getId(apiary[c(TRUE, FALSE, TRUE, FALSE)])
getId(apiary[c(TRUE, FALSE)]) # beware of recycling!
getId(apiary[c(5, 6)])
getId(apiary[c("6", "7")])

apiary[[1]]
apiary[["2"]]
apiary[[3]]
apiary[["4"]]
try(apiary[[6]])
apiary[["7"]]

getId(c(apiary[c(1, 3)], apiary[2]))
getId(c(apiary[2], apiary[c(1, 3)]))

getId(c(apiary[2], apiary[0]))
getId(c(apiary[0], apiary[2]))

getId(c(apiary[2], NULL))
getId(c(NULL, apiary[2]))

apiary1 <- apiary[1:2]
apiary2 <- apiary[3:4]
getId(apiary1)
getId(apiary2)
apiary1[[1]] <- apiary2[[1]]
getId(apiary1)
apiary1[["4"]] <- apiary2[["5"]]
getId(apiary1)
try(apiary2[[1]] <- apiary2[[2]])

apiary1 <- apiary[1:2]
apiary2 <- apiary[3:5]
getId(apiary1)
getId(apiary2)
apiary2[1:2] <- apiary1
getId(apiary2)
try(apiary2[1] <- apiary1)
try(apiary2[1:3] <- apiary1)
try(apiary2[1:2] <- apiary1[[1]])

apiary2 <- apiary[3:5]
getId(apiary2)
apiary2[c("4", "5")] <- apiary1
getId(apiary2)
try(apiary2[c("4", "5")] <- apiary1)
}
\seealso{
\code{\link{createColonies}}
}
