% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class-SimParamBee.R
\name{SimParamBee}
\alias{SimParamBee}
\title{Honeybee simulation parameters}
\description{
Container for global honeybee simulation parameters. Saving this
  object as \code{SP} will allow it to be accessed by SIMplyBee functions
  without repeatedly (and annoyingly!) typing out
  \code{someFun(..., simParamBee = SP)}. \code{SimParamBee} inherits
  from AlphaSimR \code{\link{SimParam}}, so all \code{\link{SimParam}} slots
  and functions are available in addition to \code{SimParamBee}-specific
  slots and functions. Some \code{\link{SimParam}} functions could have
  upgraded behaviour as documented in line with honeybee biology.
}
\details{
This documentation shows details specific to \code{SimParamBee}. We
  suggest you also read all the options provided by the AlphaSimR
  \code{\link{SimParam}}. Below we show minimal usage cases for each
  \code{SimParamBee} function.

See also \code{vignette(package = "SIMplyBee")} for descriptions of how
  SIMplyBee implements the specific honeybee biology.
}
\examples{

## ------------------------------------------------
## Method `SimParamBee$new`
## ------------------------------------------------

founderGenomes <- quickHaplo(nInd = 10, nChr = 3, segSites = 10)
SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 2)

# We need enough segregating sites
try(SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 100))
founderGenomes <- quickHaplo(nInd = 10, nChr = 3, segSites = 100)
SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 100)

# We can save the csd locus on chromosome 1 or 2, too, for quick simulations
founderGenomes <- quickHaplo(nInd = 10, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 100)

## ------------------------------------------------
## Method `SimParamBee$addToCaste`
## ------------------------------------------------

founderGenomes <- quickHaplo(nInd = 2, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackPed(isTrackPed = TRUE)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 10)
colony <- createColony(x = basePop[2])
colony <- crossColony(colony, drones = drones[1:5], nFathers = 5)
colony <- addWorkers(colony, nInd = 5)
colony <- addDrones(colony, nInd = 5)
colony <- addVirginQueens(colony, nInd = 2)

SP$pedigree
SP$caste

## ------------------------------------------------
## Method `SimParamBee$changeCaste`
## ------------------------------------------------

founderGenomes <- quickHaplo(nInd = 2, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackPed(isTrackPed = TRUE)
basePop <- createVirginQueens(founderGenomes)
SP$pedigree
SP$caste

drones <- createDrones(x = basePop[1], nInd = 10)
colony <- createColony(x = basePop[2])
colony <- crossColony(colony, drones = drones[1:5], nFathers = 5)
SP$pedigree
SP$caste
}
\references{
Bovo et al. (2021) Application of Next Generation Semiconductor-Based
  Sequencing for the Identification of Apis mellifera Complementary Sex
  Determiner (csd) Alleles from Honey DNA. Insects, 12(10), 868.
  \url{https://www.mdpi.com/2075-4450/12/10/868}

Lechner et al. (2014) Nucleotide variability at its limit? Insights into
 the number and evolutionary dynamics of the sex-determining specificities
 of the honey bee Apis mellifera Molecular Biology and Evolution, 31,
 272-287. \url{https://academic.oup.com/mbe/article/31/2/272/998263}

Seeley (2019) The Lives of Bees: The Untold Story of the Honey
  Bee in the Wild. Princeton: Princeton University Press.
  \url{https://doi-org.ezproxy.is.ed.ac.uk/10.1515/9780691189383}

Zareba et al. (2017) Uneven distribution of complementary sex determiner
  (csd) alleles in Apis mellifera population. Scientific Reports, 7, 2317.
  \url{https://doi.org/10.1038/s41598-017-02629-9}
}
\section{Super class}{
\code{\link[AlphaSimR:SimParam]{AlphaSimR::SimParam}} -> \code{SimParamBee}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{nWorkers}}{numeric or function, a number of workers generated in a
  colony - used in \code{\link{createWorkers}}, \code{\link{addWorkers}},
  \code{\link{buildUpColony}}, and \code{\link{buildUpColonies}}.

  The default value is 100, that is, queen generates 100 workers - this
  is for a down-scaled simulation (for efficiency) assuming that this
  represents ~60,000 workers in a full/strong colony (Seeley, 2019). This
  value is set in \code{SimParamBee$new()} to have a number to work with
  - you might want to change this!
  TODO: Is Seeley (2019) good citation for the defaults in SimParamBee?
        https://github.com/HighlanderLab/SIMplyBee/issues/242

  When \code{nWorkers} is a function, it should work with internals of
  other functions. Therefore, the function MUST be defined like
  \code{function(colony, arg = default) someCode }, that is, the first
  argument MUST be \code{colony} and any following arguments MUST have a
  default value. See \code{\link{nWorkersPoisson}} or
  \code{\link{nWorkersPoissonQueenFecundity}} for examples. You will
  likely want to define your own functions!}

\item{\code{nDrones}}{numeric or function, a number of drones generated in a
  colony - used in \code{\link{createDrones}}, \code{\link{addDrones}},
  \code{\link{buildUpColony}}, and \code{\link{buildUpColonies}}.

  The default value is 10, that is, queen generates 10 drones - this is
  for a down-scaled simulation (for efficiency) assuming that this
  represents ~1,000 drones in a full/strong colony (Seeley, 2019). This
  value is set in \code{SimParamBee$new()} to have a number to work with
  - you might want to change this!
  TODO: Is Seeley (2019) good citation for the defaults in SimParamBee?
        https://github.com/HighlanderLab/SIMplyBee/issues/242

  When \code{nDrones} is a function, it should work with internals of
  other functions. Therefore, the function MUST be defined like
  \code{function(x, arg = default) someCode }, that is, the first
  argument MUST be \code{x} and any following arguments MUST have a
  default value. See \code{\link{nDronesPoisson}},
  \code{\link{nDronesTruncPoisson}},
  \code{\link{nDronesPoissonQueenFecundity}}, or
  \code{\link{nDronesTruncPoissonQueenFecundity}} for examples. You will
  likely want to define your own functions!}

\item{\code{nVirginQueens}}{numeric or function, a number of virgin queens
  generated when a queen dies or other situations - used in
  \code{\link{createVirginQueens}} and \code{\link{addVirginQueens}}.

  The default value is 10, that is, when the queen dies, workers generate
  10 new virgin queens (Seeley, 2019). This value is set in
  \code{SimParamBee$new()} to have a number to work with - you might want
  to change this!
  TODO: Is Seeley (2019) good citation for the defaults in SimParamBee?
        https://github.com/HighlanderLab/SIMplyBee/issues/242

  When \code{nVirginQueens} is a function, it should work with internals
  of other functions. Therefore, the function MUST be defined like
  \code{function(colony, arg = default) someCode }, that is, the first
  argument MUST be \code{colony} and any following arguments MUST have a
  default value. See \code{\link{nVirginQueensPoisson}},
  \code{\link{nVirginQueensTruncPoisson}},
  \code{\link{nVirginQueensPoissonColonyStrength}}, or
  \code{\link{nVirginQueensTruncPoissonColonyStrength}} for examples.
  You will likely want to define your own functions!}

\item{\code{nFathers}}{numeric or function, a number of drones a queen mates
  with  - used in \code{\link{pullDroneGroupsFromDCA}},
  \code{\link{crossVirginQueen}}, \code{\link{crossColony}}, and
  \code{\link{crossColonies}}.

  The default value is 15, that is, a virging queen mates on average with
  15 drones (Seeley, 2019). This value is set in \code{SimParamBee$new()}
  to have a number to work with - you might want to change this!
  TODO: Is Seeley (2019) good citation for the defaults in SimParamBee?
        https://github.com/HighlanderLab/SIMplyBee/issues/242

  When \code{nFathers} is a function, it should work with internals of
  other functions. Therefore, the function MUST be defined like
  \code{function(arg = default) someCode }, that is, any arguments MUST
  have a default value. We did not use the \code{colony} argument here,
  because \code{nFathers} likely does not depend on the colony. Let us
  know if we are wrong! See \code{\link{nFathersPoisson}} or
  \code{\link{nFathersTruncPoisson}} for examples. You will likely want
  to define your own functions!}

\item{\code{pSwarm}}{numeric or a function, the percentage of workers that leave
  with the old queen when the colony swarms - used in
  \code{\link{swarmColony}} and \code{\link{swarmColonies}}.

  The default value is 0.50, that is, about a half of workers leave colony
  in a swarm (Seeley, 2019). This value is set in \code{SimParamBee$new()}
  to have a percentage to work with - you might want to change this!
  TODO: Is Seeley (2019) good citation for the defaults in SimParamBee?
        https://github.com/HighlanderLab/SIMplyBee/issues/242

  When \code{pSwarm} is a function, it should work with internals of
  other functions. Therefore, the function MUST be defined like
  \code{function(colony, arg = default) someCode }, that is, the first
  argument MUST be \code{colony} and any following arguments MUST have a
  default value. See \code{\link{pSwarmUnif}} or
  \code{\link{pSwarmColonyStrength}} for examples. You will likely want
  to define your own functions!}

\item{\code{pSplit}}{numeric or a function, the percentage of workers to be
  removed in a managed split - used in \code{\link{splitColony}} and
  \code{\link{splitColonies}}.

  The default value is 0.30, that is, about a third of workers is put into
  a split colony from a strong colony (Seeley, 2019). This value is set
  in \code{SimParamBee$new()} to have a percentage to work with - you
  might want to change this!
  TODO: Is Seeley (2019) good citation for the defaults in SimParamBee?
        https://github.com/HighlanderLab/SIMplyBee/issues/242

  When \code{pSplit} is a function, it should work with internals of
  other functions. Therefore, the function MUST be defined like
  \code{function(colony, arg = default) someCode }, that is, the first
  argument MUST be \code{colony} and any following arguments MUST have a
  default value. See \code{\link{pSplitUnif}} or
  \code{\link{pSplitColonyStrength}} for examples. You will likely want
  to define your own functions!}

\item{\code{pDownsize}}{numeric or a function, the percentage of workers to be
  removed from the colony when downsizing, usually in autumn - used in
  \code{\link{downsizeColony}} and \code{\link{downsizeColonies}}.

  The default value is 0.85, that is, a majority of workers die before
  autumn or all die but some winter workers are created (Seeley, 2019).
  This value is set in \code{SimParamBee$new()} to have a percentage to
  work with - you might want to change this!
  TODO: Is Seeley (2019) good citation for the defaults in SimParamBee?
        https://github.com/HighlanderLab/SIMplyBee/issues/242

  When \code{pDownsize} is a function, it should work with internals of
  other functions. Therefore, the function MUST be defined like
  \code{function(colony, arg = default) someCode }, that is, the first
  argument MUST be \code{colony} and any following arguments MUST have a
  default value. See \code{\link{pDownsizeUnif}} or
  \code{\link{pDownsizeColonyStrength}} for examples. You will likely want
  to define your own functions!}

\item{\code{phenoColony}}{function, to set colony phenotypes - used in
  \code{\link{setPhenoColony}} and \code{\link{setPhenoColonies}}.

  This function should work with internals of others functions -
  therefore the function MUST be defined like \code{function(colony, arg
  = default) someCode }, that is, the first argument MUST be
  \code{colony} and any following arguments MUST have a default value.
  See \code{\link{phenoQueenPlusSumOfWorkers}} for an example. You will
  likely want to define your own functions!}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{caste}}{character, caste information for every individual ever
created; active only when \code{SP$setTrackPed(isTrackPed = TRUE)}}

\item{\code{csdChr}}{integer, chromosome of the csd locus}

\item{\code{csdPos}}{numeric, starting position of the csd locus on the
\code{csdChr} chromosome (relative at the moment, but could be in base
pairs in the future)}

\item{\code{nCsdAlleles}}{integer, number of possible csd alleles}

\item{\code{nCsdSites}}{integer, number of segregating sites representing the
csd locus}

\item{\code{csdPosStart}}{integer, starting position of the csd locus}

\item{\code{csdPosStop}}{integer, ending position of the csd locus}

\item{\code{version}}{list, versions of AlphaSimR and SIMplyBee packages used to
generate this object}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{SimParamBee$new()}}
\item \href{#method-addToCaste}{\code{SimParamBee$addToCaste()}}
\item \href{#method-changeCaste}{\code{SimParamBee$changeCaste()}}
\item \href{#method-clone}{\code{SimParamBee$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addSnpChip">}\href{../../AlphaSimR/html/SimParam.html#method-addSnpChip}{\code{AlphaSimR::SimParam$addSnpChip()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addStructuredSnpChip">}\href{../../AlphaSimR/html/SimParam.html#method-addStructuredSnpChip}{\code{AlphaSimR::SimParam$addStructuredSnpChip()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addToPed">}\href{../../AlphaSimR/html/SimParam.html#method-addToPed}{\code{AlphaSimR::SimParam$addToPed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addToRec">}\href{../../AlphaSimR/html/SimParam.html#method-addToRec}{\code{AlphaSimR::SimParam$addToRec()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitA">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitA}{\code{AlphaSimR::SimParam$addTraitA()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitAD">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitAD}{\code{AlphaSimR::SimParam$addTraitAD()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitADE">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitADE}{\code{AlphaSimR::SimParam$addTraitADE()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitADEG">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitADEG}{\code{AlphaSimR::SimParam$addTraitADEG()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitADG">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitADG}{\code{AlphaSimR::SimParam$addTraitADG()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitAE">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitAE}{\code{AlphaSimR::SimParam$addTraitAE()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitAEG">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitAEG}{\code{AlphaSimR::SimParam$addTraitAEG()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitAG">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitAG}{\code{AlphaSimR::SimParam$addTraitAG()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="ibdHaplo">}\href{../../AlphaSimR/html/SimParam.html#method-ibdHaplo}{\code{AlphaSimR::SimParam$ibdHaplo()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="manAddTrait">}\href{../../AlphaSimR/html/SimParam.html#method-manAddTrait}{\code{AlphaSimR::SimParam$manAddTrait()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="removeTrait">}\href{../../AlphaSimR/html/SimParam.html#method-removeTrait}{\code{AlphaSimR::SimParam$removeTrait()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="rescaleTraits">}\href{../../AlphaSimR/html/SimParam.html#method-rescaleTraits}{\code{AlphaSimR::SimParam$rescaleTraits()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="resetPed">}\href{../../AlphaSimR/html/SimParam.html#method-resetPed}{\code{AlphaSimR::SimParam$resetPed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="restrSegSites">}\href{../../AlphaSimR/html/SimParam.html#method-restrSegSites}{\code{AlphaSimR::SimParam$restrSegSites()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="setCorE">}\href{../../AlphaSimR/html/SimParam.html#method-setCorE}{\code{AlphaSimR::SimParam$setCorE()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="setRecombRatio">}\href{../../AlphaSimR/html/SimParam.html#method-setRecombRatio}{\code{AlphaSimR::SimParam$setRecombRatio()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="setSexes">}\href{../../AlphaSimR/html/SimParam.html#method-setSexes}{\code{AlphaSimR::SimParam$setSexes()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="setTrackPed">}\href{../../AlphaSimR/html/SimParam.html#method-setTrackPed}{\code{AlphaSimR::SimParam$setTrackPed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="setTrackRec">}\href{../../AlphaSimR/html/SimParam.html#method-setTrackRec}{\code{AlphaSimR::SimParam$setTrackRec()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="setVarE">}\href{../../AlphaSimR/html/SimParam.html#method-setVarE}{\code{AlphaSimR::SimParam$setVarE()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="switchFemaleMap">}\href{../../AlphaSimR/html/SimParam.html#method-switchFemaleMap}{\code{AlphaSimR::SimParam$switchFemaleMap()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="switchGenMap">}\href{../../AlphaSimR/html/SimParam.html#method-switchGenMap}{\code{AlphaSimR::SimParam$switchGenMap()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="switchMaleMap">}\href{../../AlphaSimR/html/SimParam.html#method-switchMaleMap}{\code{AlphaSimR::SimParam$switchMaleMap()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="switchTrait">}\href{../../AlphaSimR/html/SimParam.html#method-switchTrait}{\code{AlphaSimR::SimParam$switchTrait()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="updateLastId">}\href{../../AlphaSimR/html/SimParam.html#method-updateLastId}{\code{AlphaSimR::SimParam$updateLastId()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Starts the process of building a new simulation by creating
  a new SimParamBee object and assigning a founder population of genomes
  to the this object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimParamBee$new(
  founderPop,
  nWorkers = 100,
  nDrones = 10,
  nVirginQueens = 10,
  nFathers = 15,
  pSwarm = 0.5,
  pSplit = 0.3,
  pDownsize = 0.85,
  csdChr = 3,
  csdPos = 0.865,
  nCsdAlleles = 128,
  phenoColony = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{founderPop}}{\code{\link{MapPop-class}}, founder population of
genomes}

\item{\code{nWorkers}}{see \code{\link{SimParamBee}} field \code{nWorkers}}

\item{\code{nDrones}}{see \code{\link{SimParamBee}} field \code{nDrones}}

\item{\code{nVirginQueens}}{see \code{\link{SimParamBee}} field \code{nVirginQueens}}

\item{\code{nFathers}}{see \code{\link{SimParamBee}} field \code{nFathers}}

\item{\code{pSwarm}}{see \code{\link{SimParamBee}} field \code{pSwarm}}

\item{\code{pSplit}}{see \code{\link{SimParamBee}} field \code{pSplit}}

\item{\code{pDownsize}}{see \code{\link{SimParamBee}} field \code{pDownsize}}

\item{\code{csdChr}}{integer, chromosome that will carry the csd locus, by
default 3, but if there are less chromosomes (for a simplified
simulation), the locus is put on the last available chromosome (1 or
2); if \code{NULL} then csd locus is ignored in the simulation}

\item{\code{csdPos}}{numeric, starting position of the csd locus on the
\code{csdChr} chromosome (relative at the moment, but could be in base
pairs in future)}

\item{\code{nCsdAlleles}}{integer, number of possible csd alleles (this
determines how many segregating sites will be needed to represent the
csd locus from the underlying bi-allelic SNP; the minimum number of
bi-allelic SNP needed is \code{log2(nCsdAlleles)}); if set to \code{0}
then \code{csdChr=NULL} is triggered. By default we set \code{nCsdAlleles}
to 128, which is at the upper end of the reported number of csd alleles
(Lechner et al., 2014; Zareba et al., 2017; Bovo et al., 2021).}

\item{\code{phenoColony}}{see \code{\link{SimParamBee}} field \code{phenoColony}}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{founderGenomes <- quickHaplo(nInd = 10, nChr = 3, segSites = 10)
SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 2)

# We need enough segregating sites
try(SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 100))
founderGenomes <- quickHaplo(nInd = 10, nChr = 3, segSites = 100)
SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 100)

# We can save the csd locus on chromosome 1 or 2, too, for quick simulations
founderGenomes <- quickHaplo(nInd = 10, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 100)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addToCaste"></a>}}
\if{latex}{\out{\hypertarget{method-addToCaste}{}}}
\subsection{Method \code{addToCaste()}}{
Store caste information (for internal use only!)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimParamBee$addToCaste(id, caste)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{character, individuals whose caste will be stored}

\item{\code{caste}}{character, single "Q" for queens, "W" for workers, "D" for
drones, "V" for virgin queens, and "F" for fathers}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{founderGenomes <- quickHaplo(nInd = 2, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackPed(isTrackPed = TRUE)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 10)
colony <- createColony(x = basePop[2])
colony <- crossColony(colony, drones = drones[1:5], nFathers = 5)
colony <- addWorkers(colony, nInd = 5)
colony <- addDrones(colony, nInd = 5)
colony <- addVirginQueens(colony, nInd = 2)

SP$pedigree
SP$caste
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-changeCaste"></a>}}
\if{latex}{\out{\hypertarget{method-changeCaste}{}}}
\subsection{Method \code{changeCaste()}}{
Change caste information (for internal use only!)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimParamBee$changeCaste(id, caste)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{character, individuals whose caste will be changed}

\item{\code{caste}}{character, single "Q" for queens, "W" for workers, "D" for
drones, "V" for virgin queens, and "F" for fathers}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{founderGenomes <- quickHaplo(nInd = 2, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackPed(isTrackPed = TRUE)
basePop <- createVirginQueens(founderGenomes)
SP$pedigree
SP$caste

drones <- createDrones(x = basePop[1], nInd = 10)
colony <- createColony(x = basePop[2])
colony <- crossColony(colony, drones = drones[1:5], nFathers = 5)
SP$pedigree
SP$caste
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimParamBee$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
