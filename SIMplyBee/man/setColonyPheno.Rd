% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L2_Colony.R
\name{setColonyPheno}
\alias{setColonyPheno}
\title{Set phenotypes of individuals in a colony}
\usage{
setColonyPheno(x, simParamBee = NULL, ...)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}

\item{...}{arguments passed to \code{\link{setPheno}}}
}
\value{
\code{\link{Colony-class}} or \code{\link{MultiColony-class}} with phenotypes
}
\description{
Level 2 function that sets value for all individuals (queen,
  workers, drones, and virgin queens) in a colony or multicolony. It calls
  the \code{\link{setPheno}} for each caste.
}
\details{
This function does not set colony phenotype value - it only sets
  phenotype values for colony members! You can achieve this also by using
  \code{SimParamBee$setVarE()} and then all colony members will automatically
  get phenotype value for all traits the moment they are created. This means
  that as colony changes over time, individuals might have experienced
  different environment and you might want to run this function
  \code{setColonyPheno} with appropriate arguments (see \code{...} and
  \code{\link{setPheno}}).

  We do not store colony phenotype value because its too dynamics. Use
  \code{\link{getColonyPheno}} and \code{\link{calcColonyPheno}} to get it
  on the fly.
}
\examples{
founderGenomes <- quickHaplo(nInd = 5, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)

# Define two traits that collectively affect colony honey yield:
# 1) queen's effect on colony honey yield, say via pheromone secretion phenotype
# 2) workers' effect on colony honey yield, say via foraging phenotype
# The traits will have a negative genetic correlation of -0.5 and heritability
# of 0.25 (on an individual level)
meanP <- c(20, 0)
nWorkers <- 10
varA <- c(1, 1 / nWorkers)
corA <- matrix(data = c(
  1.0, -0.5,
  -0.5, 1.0
), nrow = 2, byrow = TRUE)
varE <- c(3, 3 / nWorkers)
varA / (varA + varE)
SP$addTraitADE(nQtlPerChr = 100,
               mean = meanP,
               var = varA, corA = corA,
               meanDD = 0.1, varDD = 0.2, corD = corA,
               relAA = 0.1, corAA = corA)
# If you use SimParamBee$setVarE() then you get phenotypes automatically
# SP$setVarE(varE = varE)

basePop <- createVirginQueens(founderGenomes)
drones <- createDrones(x = basePop[1], nInd = 100)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 5, nFathers = 14)

# Create and cross Colony and MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
colony <- buildUp(colony, nWorkers = nWorkers, nDrones = 3)
apiary <- createMultiColony(basePop[3:5], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[c(2, 3)])
apiary <- buildUp(apiary, nWorkers = nWorkers, nDrones = 3)

# Set phenotypes for all colony individuals
colony <- setColonyPheno(colony, varE = varE) # see ?setPheno for varE
apiary <- setColonyPheno(apiary, varE = varE) # see ?setPheno for varE
# Queen's phenotype values for both traits
getQueenPheno(colony)
getQueenPheno(apiary)

# Workers' phenotype values for both traits
getWorkersPheno(colony)
getWorkersPheno(apiary)

# For the whole colony
allCaste <- c("queen", "workers", "drones", "virginQueens")
getColonyPheno(colony, caste = allCaste)
getColonyPheno(apiary, caste = allCaste)

}
\seealso{
\code{\link{setPheno}}, \code{\link{getColonyPheno}}, and
  \code{\link{calcColonyPheno}}
}
