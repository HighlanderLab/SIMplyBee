% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L1_Pop.R
\name{pullDroneGroupsFromDCA}
\alias{pullDroneGroupsFromDCA}
\title{Pulls drone groups from a Drone Congregation Area (DCA)}
\usage{
pullDroneGroupsFromDCA(DCA, n, nFathers = NULL, simParamBee = NULL)
}
\arguments{
\item{DCA}{\code{\link{Pop-class}}, population of drones}

\item{n}{integer, number of drone groups to be created}

\item{nFathers}{numeric of function, number of drones that a virgin queen
mates with; if \code{NULL} then \code{\link{SimParamBee}$nFathers} is used}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
list of \code{\link{Pop-class}}
}
\description{
Level 1 function that pulls drone groups from a Drone
  Congregation Area (DCA) to use them later in mating. Within the function
  drones are pulled (removed) from the DCA to reflect the fact that drones
  die after mating, so they can't be present in the DCA anymore. Be careful
  what you do with the DCA object outside function to avoid drone "copies".
}
\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 10)
colony1 <- createColony(x = basePop[2])
colony1 <- crossColony(colony1, drones = drones[1:5], nFathers = 5)
colony2 <- createColony(x = basePop[3])
colony2 <- crossColony(colony2, drones = drones[6:10], nFathers = 5)
colony1 <- addDrones(colony1, nInd = 10)
colony2 <- addDrones(colony2, nInd = 20)
apiary <- c(colony1, colony2)
DCA <- createDCA(apiary)
pullDroneGroupsFromDCA(DCA, n = 4, nFathers = 5)
}
