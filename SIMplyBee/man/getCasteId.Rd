% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L1_Pop.R
\name{getCasteId}
\alias{getCasteId}
\title{Access ID of individuals of a caste, or ID of all members of colony}
\usage{
getCasteId(x, caste = "all")
}
\arguments{
\item{x}{Pop, Colony or Colonies class objects}

\item{caste}{character, "queen", "fathers", "virginQueens", "workers",
"drones", or "all"}
}
\value{
when \code{x} is \code{\link{Pop-class}} for \code{caste != "all"}
 or list for \code{caste == "all"} with ID nodes named by caste;
   when \code{x} is \code{\link{Colony-class}} return is a named list of
  \code{\link{Pop-class}} for \code{caste != "all"}
  or named list for \code{caste == "all"} indluding caste members IDs;
   when \code{x} is \code{\link{Colonies-class}} return is a named list of
  \code{\link{Pop-class}} for \code{caste != "all"} or named list of lists of
  \code{\link{Pop-class}} for \code{caste == "all"} indluding caste members IDs
}
\description{
Level 1 function that returns the ID individuals of a caste. These
  individuals stay in the colony (compared to \code{\link{pullCaste}}).
}
\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- newPop(founderGenomes)

drones <- createFounderDrones(pop = basePop[1], nDronesPerQueen = 10)
colony1 <- createColony(queen = basePop[2], fathers = drones[1:5])
colony2 <- createColony(queen = basePop[3], fathers = drones[6:10])

colony1 <- addWorkers(colony1, nInd = 10)
colony1 <- addVirginQueens(colony1, nInd = 4)
colony1 <- addDrones(colony1, nInd = 2)
colony2 <- addWorkers(colony2, nInd = 20)

apiary1 = c(colony1, colony2)

getCasteId(x = drones)
getCasteId(x = colony1)
getCasteId(x = colony1, caste = "workers")
getCasteId(x = apiary1)
getCasteId(x = apiary1, caste = "virginQueens")

#Creating a data.frame from the lists of ids
tmp <- getCasteId(x = apiary1)
df <- data.frame(unlist(tmp2))
names(df)[1] <- "id"
df$caste <- as.character(map(strsplit(row.names(df), ".", TRUE), 2))
df$caste <- gsub(pattern = "[[:digit:]]", replacement = "", x = df$caste)
df$colony <- as.character(map(strsplit(row.names(df), ".", TRUE), 1))
df

#' @export
}
\seealso{
\code{\link{getCaste}}
}
