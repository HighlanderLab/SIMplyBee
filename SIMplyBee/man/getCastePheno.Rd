% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getCastePheno}
\alias{getCastePheno}
\alias{getQueenPheno}
\alias{getFathersPheno}
\alias{getVirginQueensPheno}
\alias{getWorkersPheno}
\alias{getDronesPheno}
\title{Access phenotype values of individuals in a caste}
\usage{
getCastePheno(x, caste, nInd = NULL, collapse = FALSE)

getQueenPheno(x, collapse = FALSE)

getFathersPheno(x, nInd = NULL, collapse = FALSE)

getVirginQueensPheno(x, nInd = NULL, collapse = FALSE)

getWorkersPheno(x, nInd = NULL, collapse = FALSE)

getDronesPheno(x, nInd = NULL, collapse = FALSE)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{caste}{character, "queen", "fathers", "workers", "drones",
"virginQueens", or "all"}

\item{nInd}{numeric, number of individuals to access, if \code{NULL} all
individuals are accessed, otherwise a random sample}

\item{collapse}{logical, if the return value should be a single matrix
with phenotypes of all the individuals}
}
\value{
vector of genetic values when \code{x} is \code{\link{Colony-class}}
  and list of vectors of genetic values when \code{x} is
  \code{\link{MultiColony-class}}, named by colony id when \code{x} is
  \code{\link{MultiColony-class}}
}
\description{
Level 0 function that returns phenotype values of individuals in a
  caste.
}
\section{Functions}{
\itemize{
\item \code{getQueenPheno()}: Access phenotype value of the queen

\item \code{getFathersPheno()}: Access phenotype values of fathers

\item \code{getVirginQueensPheno()}: Access phenotype values of virgin queens

\item \code{getWorkersPheno()}: Access phenotype values of workers

\item \code{getDronesPheno()}: Access phenotype values of drones

}}
\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$addTraitA(nQtlPerChr = 10, var = 1)
SP$setVarE(varE = 1)
# TODO: how should we handle the creation of phenotypes when residual variance
#       is set (then we get phenotypes automatically and we should not call
#       setPheno() below - this overwrites previous phenotypes), but when the
#       residual variance is not set, we have to call setPheno()
#       https://github.com/HighlanderLab/SIMplyBee/issues/235

basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
droneGroups <- pullDroneGroupsFromDCA(drones, n = 10, nDrones = nFathersPoisson)

# Create a Colony and a MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, drones = droneGroups[[1]])
colony <- buildUp(x = colony, nWorkers = 6, nDrones = 3)
colony <- addVirginQueens(x = colony, nInd = 5)

apiary <- createMultiColony(basePop[3:4], n = 2)
apiary <- cross(apiary, drones = droneGroups[c(2, 3)])
apiary <- buildUp(x = apiary, nWorkers = 6, nDrones = 3)
apiary <- addVirginQueens(x = apiary, nInd = 5)

getCastePheno(colony, caste = "queen")
getQueenPheno(colony)

getCastePheno(colony, caste = "fathers")
getCastePheno(colony, caste = "fathers", nInd = 2)
getCastePheno(colony, caste = "fathers", nInd = 2) # random sample!
getFathersPheno(colony)
getFathersPheno(colony, nInd = 2)

getCastePheno(colony, caste = "virginQueens")
getVirginQueensPheno(colony)

getCastePheno(colony, caste = "workers")
getWorkersPheno(colony)

getCastePheno(colony, caste = "drones")
getDronesPheno(colony)

# Get phenotypes for all individuals
getCastePheno(colony, caste = "all")
# Get all phenotypes in a single matrix
getCastePheno(colony, caste = "all", collapse = TRUE)

getCastePheno(apiary, caste = "queen")
getQueenPheno(apiary)

getCastePheno(apiary, caste = "fathers")
getCastePheno(apiary, caste = "fathers", nInd = 2)
getCastePheno(apiary, caste = "fathers", nInd = 2) # random sample!
getFathersPheno(apiary)
getFathersPheno(apiary, nInd = 2)

getCastePheno(apiary, caste = "virginQueens")
getVirginQueensPheno(apiary)

getCastePheno(apiary, caste = "workers")
getWorkersPheno(apiary)

getCastePheno(apiary, caste = "drones")
getDronesPheno(apiary)

# Get the phenotypes of all individuals either by colony or in a single matrix
getCastePheno(apiary, caste = "all")
getCastePheno(apiary, caste = "all", collapse = TRUE)
}
\seealso{
\code{\link{pheno}}
}
