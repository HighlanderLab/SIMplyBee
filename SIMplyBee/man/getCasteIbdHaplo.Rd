% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getCasteIbdHaplo}
\alias{getCasteIbdHaplo}
\alias{getQueenIbdHaplo}
\alias{getFathersIbdHaplo}
\alias{getVirginQueensIbdHaplo}
\alias{getWorkersIbdHaplo}
\alias{getDronesIbdHaplo}
\title{Access IBD haplotypes of individuals in a caste}
\usage{
getCasteIbdHaplo(
  x,
  caste,
  nInd = NULL,
  chr = NULL,
  snpChip = NULL,
  dronesHaploid = TRUE,
  simParamBee = NULL
)

getQueenIbdHaplo(x, chr = NULL, snpChip = NULL, simParamBee = NULL)

getFathersIbdHaplo(
  x,
  nInd = NULL,
  chr = NULL,
  snpChip = NULL,
  dronesHaploid = TRUE,
  simParamBee = NULL
)

getVirginQueensIbdHaplo(
  x,
  nInd = NULL,
  chr = NULL,
  snpChip = NULL,
  simParamBee = NULL
)

getWorkersIbdHaplo(
  x,
  nInd = NULL,
  chr = NULL,
  snpChip = NULL,
  simParamBee = NULL
)

getDronesIbdHaplo(
  x,
  nInd = NULL,
  chr = NULL,
  snpChip = NULL,
  dronesHaploid = TRUE,
  simParamBee = NULL
)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{caste}{character, "queen", "fathers", "workers", "drones", or
"virginQueens"}

\item{nInd}{numeric, number of individuals to access, if \code{NULL} all
individuals are accessed, otherwise a random sample}

\item{chr}{numeric, chromosomes to retrieve, if \code{NULL}, all chromosome
are retrieved}

\item{snpChip}{integer, indicating which SNP array loci are to be retrieved,
if \code{NULL}, all sites are retrieved}

\item{dronesHaploid}{logical, return haploid result for drones?}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
matrix with haplotypes when \code{x} is \code{\link{Colony-class}}
  and list of matrices with haplotypes when \code{x} is
  \code{\link{MultiColony-class}}, named by colony id when \code{x} is
  \code{\link{MultiColony-class}}
}
\description{
Level 0 function that returns IBD (identity by descent)
  haplotypes of individuals in a caste.
}
\section{Functions}{
\itemize{
\item \code{getQueenIbdHaplo()}: Access IBD haplotype data of the queen

\item \code{getFathersIbdHaplo()}: Access IBD haplotype data of fathers

\item \code{getVirginQueensIbdHaplo()}: Access IBD haplotype data of virgin queens

\item \code{getWorkersIbdHaplo()}: Access IBD haplotype data of workers

\item \code{getDronesIbdHaplo()}: Access IBD haplotype data of drones

}}
\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackRec(TRUE)
SP$setTrackPed(isTrackPed = TRUE)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
droneGroups <- pullDroneGroupsFromDCA(drones, n = 10, nDrones = nFathersPoisson)

# Create a Colony and a MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, drones = droneGroups[[1]])
colony <- buildUp(x = colony, nWorkers = 6, nDrones = 3)
colony <- addVirginQueens(x = colony, nInd = 5)

apiary <- createMultiColony(basePop[3:4], n = 2)
apiary <- cross(apiary, drones = droneGroups[c(2, 3)])
apiary <- buildUp(x = apiary, nWorkers = 6, nDrones = 3)
apiary <- addVirginQueens(x = apiary, nInd = 5)

getCasteIbdHaplo(x = colony, caste = "queen")
getQueenIbdHaplo(colony)

getCasteIbdHaplo(colony, caste = "fathers")
getCasteIbdHaplo(colony, caste = "fathers", nInd = 2)
getCasteIbdHaplo(colony, caste = "fathers", nInd = 2) # random sample!
getFathersIbdHaplo(colony)
getFathersIbdHaplo(colony, nInd = 2)

getCasteIbdHaplo(colony, caste = "virginQueens")
getVirginQueensIbdHaplo(colony)

getCasteIbdHaplo(colony, caste = "workers")
getWorkersIbdHaplo(colony)

getCasteIbdHaplo(colony, caste = "drones")
getDronesIbdHaplo(colony)

getCasteIbdHaplo(x = apiary, caste = "queen")
getQueenIbdHaplo(apiary)

getCasteIbdHaplo(apiary, caste = "fathers")
getCasteIbdHaplo(apiary, caste = "fathers", nInd = 2)
getCasteIbdHaplo(apiary, caste = "fathers", nInd = 2) # random sample!
getFathersIbdHaplo(apiary)
getFathersIbdHaplo(apiary, nInd = 2)

getCasteIbdHaplo(apiary, caste = "virginQueens")
getVirginQueensIbdHaplo(apiary)

getCasteIbdHaplo(apiary, caste = "workers")
getWorkersIbdHaplo(apiary)

getCasteIbdHaplo(apiary, caste = "drones")
getDronesIbdHaplo(apiary)
}
\seealso{
\code{\link{getIbdHaplo}} and \code{\link{pullIbdHaplo}}
}
