% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L2_Colony.R
\name{buildUpColony}
\alias{buildUpColony}
\title{Build up colony by adding (raising) workers and drones}
\usage{
buildUpColony(
  colony,
  nWorkers = NULL,
  nDrones = NULL,
  new = TRUE,
  exact = FALSE,
  resetEvents = FALSE,
  simParamBee = NULL
)
}
\arguments{
\item{colony}{\code{\link{Colony-class}}}

\item{nWorkers}{numeric or function, number of worker to add to the colony,
but see \code{new}; if \code{NULL} then \code{simParamBee$nWorkers} is used}

\item{nDrones}{numeric or function, number of drones to add to the colony,
but see \code{new}; if \code{NULL} then \code{simParamBee$nDrones} is used}

\item{new}{logical, should the number of workers and drones be added anew or
should we only top-up the existing number of workers and drones to
\code{nWorkers} and \code{nDrones} (see details)}

\item{exact}{logical, if the csd locus is turned on and exact is \code{TRUE},
create the exact specified number of only viable workers (heterozygous on
the csd locus)}

\item{resetEvents}{logical, call \code{\link{resetEvents}} as part of the
build up}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
\code{\link{Colony-class}} with workers and drones replaced or added
}
\description{
Level 2 function that builds up colony by adding (raising)
  workers and drones usually in spring or after events such as split or
  swarming.
}
\details{
Argument \code{new} enables simulation of two common cases. First,
  if you are modelling year-to-year cycle, you will likely want
  \code{new = TRUE}, so that, say, in spring you will replace old (from last
  year) workers and drones with the new ones. This is the case that we are
  targeting and hence \code{new = TRUE} is default. Second, if you are
  modelling shorter period cycles, you will likely want \code{new = FALSE} to
  just top up the current workers and drones - you might also want to look at
  \code{\link{replaceWorkers}} and \code{\link{replaceDrones}}.

TODO: Discuss on how to model day-to-day variation with \code{new = FALSE}.
  We are not sure this is easy to achieve with current implementation just
  now, but could be expanded.
  https://github.com/HighlanderLab/SIMplyBee/issues/176

This function turns on production in the colony.
}
\examples{
founderGenomes <- quickHaplo(nInd = 4, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 5)
colony <- createColony(queen = basePop[2], fathers = drones)
colony
isProductive(colony)

# Using defaults in SP$nWorkers & SP$nDrones
(colony <- buildUpColony(colony))
isProductive(colony)
getWorkers(colony)@id

# Specifying own number
colony <- buildUpColony(colony, nWorkers = 100)
getWorkers(colony)@id
# we got new workers since new = TRUE

colony <- buildUpColony(colony, nWorkers = 100, new = FALSE)
getWorkers(colony)@id
# we did NOT get new workers since new = FALSE and we were at the target of 100

colony <- buildUpColony(colony, nWorkers = 150, new = FALSE)
getWorkers(colony)@id
# we got additional workers since new = FALSE and we were NOT at the target of 150

# Specify a function that will give a number
nWorkersFun <- function(colony) {
  rpois(n = 1, lambda = 100)
}
nDronesFun <- function(colony) {
  rpois(n = 1, lambda = 15)
}

# Create new drones and a new colony
drones <- createDrones(x = basePop[1], nInd = 5)
colony <- createColony(queen = basePop[3], fathers = drones)
buildUpColony(colony, nWorkers = nWorkersFun, nDrones = nDronesFun)
buildUpColony(colony, nWorkers = nWorkersFun, nDrones = nDronesFun)

# Store a function or a value in the SP object
SP$nWorkers <- nWorkersFun
SP$nDrones <- nDronesFun
# Create new drones and a new colony
drones <- createDrones(x = basePop[1], nInd = 5)
colony <- createColony(queen = basePop[4], fathers = drones)
buildUpColony(colony)
buildUpColony(colony)
}
