% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getCasteGv}
\alias{getCasteGv}
\alias{getQueenGv}
\alias{getFathersGv}
\alias{getVirginQueensGv}
\alias{getWorkersGv}
\alias{getDronesGv}
\title{Access genetic values of individuals in a caste}
\usage{
getCasteGv(x, caste, nInd = NULL)

getQueenGv(x)

getFathersGv(x, nInd = NULL)

getVirginQueensGv(x, nInd = NULL)

getWorkersGv(x, nInd = NULL)

getDronesGv(x, nInd = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{caste}{character, "queen", "fathers", "workers", "drones", or
"virginQueens"}

\item{nInd}{numeric, number of individuals to access, if \code{NULL} all
individuals are accessed, otherwise a random sample}
}
\value{
vector of genetic values when \code{x} is \code{\link{Colony-class}}
  and list of vectors of genetic values when \code{x} is
  \code{\link{MultiColony-class}}, named by colony id when \code{x} is
  \code{\link{MultiColony-class}}
}
\description{
Level 0 function that returns genetic values of individuals in a
  caste.
}
\section{Functions}{
\itemize{
\item \code{getQueenGv()}: Access genetic value of the queen

\item \code{getFathersGv()}: Access genetic values of fathers

\item \code{getVirginQueensGv()}: Access genetic values of virgin queens

\item \code{getWorkersGv()}: Access genetic values of workers

\item \code{getDronesGv()}: Access genetic values of drones

}}
\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackRec(TRUE)
SP$setTrackPed(isTrackPed = TRUE)
SP$addTraitA(10)
SP$addSnpChip(5)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 10, nFathers = nFathersPoisson)

# Create a Colony and a MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
colony <- buildUp(x = colony)
colony <- addVirginQueens(x = colony, nInd = 5)

apiary <- createMultiColony(basePop[3:4], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[c(2, 3)])
apiary <- buildUp(x = apiary)
apiary <- addVirginQueens(x = apiary, nInd = 5)

getCasteGv(colony, caste = "queen")
getQueenGv(colony)

getCasteGv(colony, caste = "fathers")
getCasteGv(colony, caste = "fathers", nInd = 2)
getCasteGv(colony, caste = "fathers", nInd = 2)
getFathersGv(colony)
getFathersGv(colony, nInd = 2)

getCasteGv(colony, caste = "virginQueens")
getVirginQueensGv(colony)

getCasteGv(colony, caste = "workers")
getWorkersGv(colony)

getCasteGv(colony, caste = "drones")
getDronesGv(colony)

getCasteGv(apiary, caste = "queen")
getQueenGv(apiary)

getCasteGv(apiary, caste = "fathers")
getCasteGv(apiary, caste = "fathers", nInd = 2)
getCasteGv(apiary, caste = "fathers", nInd = 2)
getFathersGv(apiary)
getFathersGv(apiary, nInd = 2)

getCasteGv(apiary, caste = "virginQueens")
getVirginQueensGv(apiary)

getCasteGv(apiary, caste = "workers")
getWorkersGv(apiary)

getCasteGv(apiary, caste = "drones")
getDronesGv(apiary)
}
\seealso{
\code{\link{gv}}
}
