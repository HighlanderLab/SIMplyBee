% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L1_Pop.R
\name{getCastePop}
\alias{getCastePop}
\alias{getQueen}
\alias{getFathers}
\alias{getVirginQueens}
\alias{getWorkers}
\alias{getDrones}
\title{Access individuals of a caste}
\usage{
getCastePop(x, caste = "all", nInd = NULL, use = "order")

getQueen(x)

getFathers(x, nInd = NULL, use = "rand")

getVirginQueens(x, nInd = NULL, use = "rand")

getWorkers(x, nInd = NULL, use = "rand")

getDrones(x, nInd = NULL, use = "rand")
}
\arguments{
\item{x}{Colony or Colonies}

\item{caste}{character, "queen", "fathers", "virginQueens", "workers",
"drones", or "all"}

\item{nInd}{numeric, number of individuals to access, if \code{NULL} all
individuals are accessed; if there are less individuals than requested,
we return the ones available - this can also be just \code{NULL}}

\item{use}{character, all options provided by \code{\link{selectInd}} and
\code{"order"} that selects \code{1:nInd} individuals}
}
\value{
when \code{x} is \code{\link{Colony-class}} return is
  \code{\link{Pop-class}} for \code{caste != "all"} or list for \code{caste
  == "all"} with nodes named by caste; when \code{x} is
  \code{\link{Colonies-class}} return is a named list of
  \code{\link{Pop-class}} for \code{caste != "all"} or named list of lists of
  \code{\link{Pop-class}} for \code{caste == "all"}
}
\description{
Level 1 function that returns individuals of a caste. These
  individuals stay in the colony (compared to \code{\link{pullCastePop}}).
}
\section{Functions}{
\itemize{
\item \code{getQueen}: Access the queen

\item \code{getFathers}: Access fathers (drones the queen mated with)

\item \code{getVirginQueens}: Access virgin queens

\item \code{getWorkers}: Access workers

\item \code{getDrones}: Access drones
}}

\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 10)
colony1 <- createColony(x = basePop[2])
colony1 <- crossColony(colony1, drones = drones[1:5], nFathers = 5)
colony2 <- createColony(x = basePop[3])
colony2 <- crossColony(colony2, drones = drones[6:10], nFathers = 5)

colony1 <- addWorkers(colony1, nInd = 10)
colony1 <- addVirginQueens(colony1, nInd = 4)
colony1 <- addDrones(colony1, nInd = 2)
colony2 <- addWorkers(colony2, nInd = 20)

getCastePop(colony1, caste = "queen")
getQueen(colony1)

drones@id
getCastePop(colony1, caste = "fathers")
getCastePop(colony1, caste = "fathers")@id
getCastePop(colony1, caste = "fathers", nInd = 2)@id
getCastePop(colony1, caste = "fathers", nInd = 2)@id
getFathers(colony1)
getFathers(colony1)@id
getFathers(colony1, nInd = 2)@id
getFathers(colony1, nInd = 2)@id

getFathers(getQueen(colony1))

getCastePop(colony1, caste = "virginQueens")
getCastePop(colony1, caste = "virginQueens")@id
getCastePop(colony1, caste = "virginQueens", nInd = 2)@id
getCastePop(colony1, caste = "virginQueens", nInd = 2)@id
getVirginQueens(colony1)
getVirginQueens(colony1)@id
getVirginQueens(colony1, nInd = 2)@id
getVirginQueens(colony1, nInd = 2)@id

getCastePop(colony1, caste = "workers")
getCastePop(colony1, caste = "workers")@id
getCastePop(colony1, caste = "workers", nInd = 2)@id
getCastePop(colony1, caste = "workers", nInd = 2)@id
getWorkers(colony1)
getWorkers(colony1)@id
getWorkers(colony1, nInd = 2)@id
getWorkers(colony1, nInd = 2)@id

getCastePop(colony1, caste = "drones")
getCastePop(colony1, caste = "drones")@id
getCastePop(colony1, caste = "drones", nInd = 2)@id
getCastePop(colony1, caste = "drones", nInd = 2)@id
getDrones(colony1)
getDrones(colony1)@id
getDrones(colony1, nInd = 2)@id
getDrones(colony1, nInd = 2)@id

getCastePop(colony2, caste = "drones")
getDrones(colony2)

apiary <- c(colony1, colony2)
getCastePop(apiary, caste = "queen")
getQueen(apiary)
getCastePop(apiary, caste = "queen")[[1]]@id
getCastePop(apiary, caste = "queen")[[2]]@id

getCastePop(apiary, caste = "fathers")
getFathers(apiary)
getFathers(apiary)[[1]]@id
getFathers(apiary)[[2]]@id
getFathers(apiary, nInd = 2)

getCastePop(apiary, caste = "virginQueens")
getVirginQueens(apiary)
getVirginQueens(apiary)[[1]]@id
getVirginQueens(apiary)[[2]]
getVirginQueens(apiary, nInd = 1)
getVirginQueens(apiary, nInd = 2)

getCastePop(apiary, caste = "workers")
getWorkers(apiary)
getWorkers(apiary)[[1]]@id
getWorkers(apiary)[[2]]@id
getWorkers(apiary, nInd = 2)

getCastePop(apiary, caste = "drones")
getDrones(apiary)
getDrones(apiary)[[1]]@id
getDrones(apiary)[[2]]
getDrones(apiary, nInd = 2)

getCastePop(colony1, caste = "all")
getCastePop(colony2, caste = "all")
}
\seealso{
\code{\link{getQueen}}, \code{\link{getFathers}},
  \code{\link{getVirginQueens}}, \code{\link{getWorkers}}, and
  \code{\link{getDrones}}

\code{\link{getCasteId}} and \code{\link{getCaste}}
}
