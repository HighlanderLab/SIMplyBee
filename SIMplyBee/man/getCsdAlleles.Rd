% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getCsdAlleles}
\alias{getCsdAlleles}
\title{Get csd alleles}
\usage{
getCsdAlleles(
  x,
  nInd = NULL,
  allele = "all",
  dronesHaploid = TRUE,
  collapse = FALSE,
  unique = FALSE,
  simParamBee = NULL
)
}
\arguments{
\item{x}{\code{\link{Pop-class}}, \code{\link{Colony-class}}, or
\code{\link{MultiColony-class}}}

\item{nInd}{numeric, for how many individuals; if \code{NULL} all individuals
are taken; this can be useful as a test of sampling individuals}

\item{allele}{character, either "all" for both alleles or an integer for a
single allele, use a value of 1 for female allele and a value of 2 for male
allele}

\item{dronesHaploid}{logical, return haploid result for drones?}

\item{collapse}{logical, if \code{TRUE}, the function will return a set of
csd alleles across the entire population, colony, or multicolony (not
separately for each caste when \code{x} is a colony or each caste of
each colony when \code{x} is a multicolony. This is a way to get one single
object as an output across castes or colonies. Note this has nothing to do
with the colony collapse. It's like \code{paste(..., collapse = TRUE)}.
Default is \code{FALSE}. See examples about this behaviour.}

\item{unique}{logical, return only the unique set of csd alleles. This argument
interacts with \code{collapse}. Default is \code{FALSE}. See examples about
this behaviour.}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
matrix with haplotypes when \code{x} is \code{\link{Pop-class}}, list
  of matrices with haplotypes when \code{x} is \code{\link{Colony-class}}
  (list nodes named by caste) and list of a list of matrices with haplotypes
  when \code{x} is \code{\link{MultiColony-class}}, outer list is named by
  colony id when \code{x} is \code{\link{MultiColony-class}}; \code{NULL} when
  \code{x} is \code{NULL}
}
\description{
Level 0 function that returns alleles from the csd locus. See
  \code{\link{SimParamBee}} for more information about the csd locus.
}
\details{
If both collapse and unique are \code{TRUE}, the function returns a
  unique set of csd alleles in the entire population, colony, or multicolony
}
\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 5)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 10, nFathers = nFathersPoisson)

# Create a Colony and a MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
colony <- buildUp(x = colony, nWorkers = 6, nDrones = 3)

apiary <- createMultiColony(basePop[3:4], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[c(2, 3)])
apiary <- buildUp(x = apiary, nWorkers = 6, nDrones = 3)

# Use getCsdAlleles on a Population
getCsdAlleles(getQueen(colony))
getCsdAlleles(getFathers(colony))
getCsdAlleles(getWorkers(colony))
getCsdAlleles(getDrones(colony))

# Use getCsdAlleles on a Colony
getCsdAlleles(colony)
getCsdAlleles(colony, unique = TRUE)
getCsdAlleles(colony, collapse = TRUE)
getCsdAlleles(colony, collapse = TRUE, unique = TRUE)

# Use getCsdAlleles on a MultiColony
getCsdAlleles(apiary)
getCsdAlleles(apiary, unique = TRUE)
getCsdAlleles(apiary, collapse = TRUE)
getCsdAlleles(apiary, collapse = TRUE, unique = TRUE)
getCsdAlleles(apiary, nInd = 2)
}
