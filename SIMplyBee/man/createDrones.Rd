% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L1_Pop.R
\name{createDrones}
\alias{createDrones}
\title{Creates drones from the colony}
\usage{
createDrones(x, nInd = NULL, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Pop-class}}, \code{\link{Colony-class}}, or
\code{\link{MultiColony-class}}; with \code{\link{Pop-class}}, its individuals
must be virgin queens or queens (see \code{\link{createVirginQueens}}) -
this case is so that we can initiate simulation by simulating drones from
founding queens before we can create colonies}

\item{nInd}{numeric or function, number of drones; if \code{NULL} then
\code{\link{SimParamBee}$nDrones} is used; when \code{x} is
\code{\link{Pop-class}} the \code{nInd} is applied to every individual in
the \code{x} (here population individuals serve as a queen, for example
to initiate population from founding queens; see details). If \code{x}
is a \code{\link{Colony-class}} or \code{\link{MultiColony-class}}, then the
\code{nInd} means the number of drones per colony.}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
when \code{x} is \code{\link{Pop-class}} or
  \code{\link{Colony-class}} return is a
  \code{\link{Pop-class}} with drones; when \code{x} is
  \code{\link{MultiColony-class}} return is a list of \code{\link{Pop-class}}
  with drones - list nodes are named by colony ID
}
\description{
Level 1 function that creates drones from a  \code{\link{Pop-class}},
 \code{\link{Colony-class}} or \code{\link{MultiColony-class}}.
  Drones are double haploid and created from the diploid genome
  of a queen with recombination. Queen ID is stored as the father and
  mother of drones.
}
\details{
When \code{x} is \code{\link{Pop-class}} this function creates
  \code{nInd} drones for each individual in \code{x}, which will amount to
  \code{nInd(x) * nInd} drones - this can be slow if either or both of
  \code{c(nInd(x), nInd)} is large; tune the numbers to your needs.
}
\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackRec(TRUE)
SP$setTrackPed(isTrackPed = TRUE)
SP$addTraitA(10)
SP$addSnpChip(5)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 10, nFathers = nFathersPoisson)

# Create a Colony and a MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
apiary <- createMultiColony(basePop[3:4], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[c(2, 3)])

basePop[1]@id
drones@id
drones@sex
drones@misc
drones@mother
drones@father
SP$pedigree
SP$recHist
SP$recHist[[13]][[1]][1]
SP$recHist[[13]][[1]][2]
SP$caste

# Using a default in SP$nDrones
# (just to have some drones - change this to your needs!)
SP$nDrones
createDrones(colony)
createDrones(apiary)

# Specify own number
SP$nDrones <- 15
createDrones(colony)
createDrones(apiary)
# nDrones will NOT vary between function calls when a constant is used

# Specify a function that will give a number
createDrones(colony, nInd = nDronesPoisson)
createDrones(apiary, nInd = nDronesPoisson)
# nDrones will vary between function calls when a function is used

# Store a function or a value in the SP object
SP$nDrones <- nDronesPoisson
createDrones(colony)
createDrones(apiary)
# nDrones will vary between function calls when a function is used

}
