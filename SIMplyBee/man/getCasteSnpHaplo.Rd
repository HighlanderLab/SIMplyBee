% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getCasteSnpHaplo}
\alias{getCasteSnpHaplo}
\title{Access SNP array haplotypes of individuals in a caste}
\usage{
getCasteSnpHaplo(
  x,
  caste,
  nInd = NULL,
  snpChip = 1,
  haplo = "all",
  chr = NULL,
  simParamBee = NULL
)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{Colonies-class}}}

\item{caste}{character, "queen", "fathers", "virgin_queens", "workers", or
"drones"}

\item{nInd}{numeric, number of individuals to access, if \code{NULL} all
individuals are accessed, otherwise a random sample}

\item{snpChip}{numeric, indicates which SNP array haplotypes to retrieve}

\item{haplo}{character, either "all" for all haplotypes or an integer for a
single set of haplotypes, use a value of 1 for female haplotypes and a
value of 2 for male haplotypes}

\item{chr}{numeric, chromosomes to retrieve, if \code{NULL}, all chromosome
are retrieved}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
matrix with haplotypes when \code{x} is \code{\link{Colony-class}}
  and list of matrices with haplotypes when \code{x} is
  \code{\link{Colonies-class}}, named by colony id when \code{x} is
  \code{\link{Colonies-class}}
}
\description{
Level 0 function that returns SNP array haplotypes of
  individuals in a caste.
}
\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$addSnpChip(nSnpPerChr = 10)
basePop <- newPop(founderGenomes)

drones <- createFounderDrones(pop = basePop[1], nDronesPerQueen = 10)
colony1 <- createColony(queen = basePop[2], fathers = drones[1:5])
colony2 <- createColony(queen = basePop[3], fathers = drones[6:10])
colony1 <- addWorkers(colony1, nInd = 10)
colony2 <- addWorkers(colony2, nInd = 20)
colony1 <- addDrones(colony1, nInd = 2)
colony2 <- addDrones(colony2, nInd = 4)

getCasteSnpHaplo(colony1, caste = "queen")
getQueensSnpHaplo(colony1)

getCasteSnpHaplo(colony1, caste = "fathers")
getCasteSnpHaplo(colony1, caste = "fathers", nInd = 2)
getCasteSnpHaplo(colony1, caste = "fathers", nInd = 2)
getFathersSnpHaplo(colony1)
getFathersSnpHaplo(colony1, nInd = 2)

getCasteSnpHaplo(colony1, caste = "virgin_queens")
getVirginQueensSnpHaplo(colony1)

getCasteSnpHaplo(colony1, caste = "workers")
getWorkersSnpHaplo(colony1)

getCasteSnpHaplo(colony1, caste = "drones")
getDronesSnpHaplo(colony1)

apiary <- c(colony1, colony2)
getCasteSnpHaplo(apiary, caste = "queen")
getQueensSnpHaplo(apiary)

getCasteSnpHaplo(apiary, caste = "fathers")
getCasteSnpHaplo(apiary, caste = "fathers", nInd = 2)
getCasteSnpHaplo(apiary, caste = "fathers", nInd = 2)
getFathersSnpHaplo(apiary)
getFathersSnpHaplo(apiary, nInd = 2)

getCasteSnpHaplo(apiary, caste = "virgin_queens")
getVirginQueensSnpHaplo(apiary)

getCasteSnpHaplo(apiary, caste = "workers")
getWorkersSnpHaplo(apiary)

getCasteSnpHaplo(apiary, caste = "drones")
getDronesSnpHaplo(apiary)

}
\seealso{
\code{\link{getSnpHaplo}} and \code{\link{pullSnpHaplo}}
}
