% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L3_Colonies.R
\name{buildUpColonies}
\alias{buildUpColonies}
\title{Build up colony by adding (raising) workers and drones for all given
  colonies}
\usage{
buildUpColonies(
  colonies,
  nWorkers,
  nDrones = nWorkers * 0.1,
  new = FALSE,
  simParamBee = NULL
)
}
\arguments{
\item{colonies}{\code{\link{Colonies-class}}}

\item{nWorkers}{integer, desired number of workers in the colony (currently
present workers are taken into account so only the difference is added)}

\item{nDrones}{integer, desired number of drones in the colony (currently
present drones are taken into account so only the difference is added)}

\item{new}{logical, should the workers and drones be added a fresh (ignoring
currently present workers and drones)}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
\code{\link{Colonies-class}} with workers and drones added
}
\description{
Level 3 function that does the same as
  \code{\link{buildUpColony}} but for all given colonies.
}
\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- newPop(founderGenomes)

drones <- createFounderDrones(pop = basePop[1], nDronesPerQueen = 10)
colony1 <- createColony(queen = basePop[2], fathers = drones[1:5])
colony2 <- createColony(queen = basePop[3], fathers = drones[6:10])
apiary <- c(colony1, colony2)
isProductive(apiary)
apiary[[1]]
apiary[[2]]

apiary <- buildUpColonies(apiary, nWorkers = 100)
isProductive(apiary)
apiary[[1]]
apiary[[2]]

apiary <- buildUpColonies(apiary, nWorkers = 100)
apiary[[1]] # we are already at the target
apiary <- buildUpColonies(apiary, nWorkers = 150)
apiary[[1]] # increasing the target
apiary <- buildUpColonies(apiary, nWorkers = 100)
apiary[[1]] # we are already at the target
apiary <- buildUpColonies(apiary, nWorkers = 100, new = TRUE)
apiary[[1]] # adding completely new workers & drones

}
