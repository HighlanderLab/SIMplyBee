% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L2_Colony.R
\name{addWorkers}
\alias{addWorkers}
\title{Add (raise) workers in the colony}
\usage{
addWorkers(x, nInd = NULL, new = FALSE, exact = FALSE, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{nInd}{numeric or function, number of workers to be added, but see
\code{new}; if \code{NULL} then \code{\link{SimParamBee}$nWorkers} is used}

\item{new}{logical, should the number of workers be added anew or should we
only top-up the existing number of workers to \code{nInd}}

\item{exact}{logical, if the csd locus is turned on and exact is \code{TRUE},
we add the exact specified number of viable workers (heterozygous at the
csd locus)}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
\code{\link{Colony-class}} or \code{\link{MultiColony-class}} with
  workers added
}
\description{
Level 2 function that adds (raises) the specified number of
  workers to a Colony or MultiColony object y by crossing the current queen
  and the fathers. If there are already some workers present, new and present
  workers are combined.
}
\details{
This function increases queen's \code{nWorkers} and \code{nHomBrood}
  counters.
}
\examples{
founderGenomes <- quickHaplo(nInd = 5, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 100)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 5, nFathers = nFathersPoisson)

# Create and cross Colony and MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
apiary <- createMultiColony(basePop[4:5], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[3:4])

# Add workers
addWorkers(colony, nInd = 20)
nWorkers(addWorkers(apiary, nInd = 20))

# Using a default in SP$nWorkers
# (just to have some workers - change this to your needs!)
addWorkers(colony)
nWorkers(addWorkers(apiary))

# Specify own number
SP$nWorkers <- 15
addWorkers(colony)
nWorkers(addWorkers(apiary))
# nWorkers will NOT vary between function calls when a constant is used

# Specify a function that will give a number
addWorkers(colony, nInd = nWorkersPoisson)
nWorkers(addWorkers(apiary, nInd = nWorkersPoisson))
# nWorkers will vary between function calls when a function is used

# Store a function or a value in the SP object
SP$nWorkers <- nWorkersPoisson
addWorkers(colony)
nWorkers(addWorkers(apiary))
# nWorkers will vary between function calls when a function is used

# Queen's counters
getMisc(getQueen(addWorkers(colony)))

}
