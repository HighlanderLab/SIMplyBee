% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L3_Colonies.R
\name{supersedeColonies}
\alias{supersedeColonies}
\title{Supersede colony for all given colonies}
\usage{
supersedeColonies(
  colonies,
  year = NULL,
  nVirginQueens = NULL,
  simParamBee = NULL
)
}
\arguments{
\item{colonies}{\code{\link{Colonies-class}}}

\item{year}{numeric, year of birth for virgin queens}

\item{nVirginQueens}{integer, the number of virgin queens to be created in the
colony; of these one is randomly selected as the new virgin queen of the
remnant colony. If \code{NULL}, the value from \code{simParamBee$nVirginQueens}
is used}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
\code{\link{Colonies-class}} with superseded colonies
}
\description{
Level 3 function that does the same as
  \code{\link{supersedeColony}} but for all given colonies.
}
\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 10)
colony1 <- createColony(x = basePop[2])
colony1 <- crossColony(colony1, drones = drones[1:5], nFathers = 5)
colony1 <- buildUpColony(colony1, nWorkers = 100)
colony2 <- createColony(x = basePop[3])
colony2 <- crossColony(colony2, drones = drones[6:10], nFathers = 5)
colony2 <- buildUpColony(colony2, nWorkers = 100)
apiary <- c(colony1, colony2)
apiary
apiary[[1]]
apiary[[2]]

apiary <- supersedeColonies(apiary)
apiary
apiary[[1]]
apiary[[2]]
hasSuperseded(apiary)
}
