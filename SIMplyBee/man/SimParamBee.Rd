% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class-SimParamBee.R
\name{SimParamBee}
\alias{SimParamBee}
\title{Honeybee simulation parameters}
\description{
Container for global honeybee simulation parameters. Saving this
  object as \code{SP} will allow it to be accessed by SIMplyBee functions and
  many defaults can be used from the \code{SP}. \code{SimParamBee} inherits
  from AlphaSimR \code{\link{SimParam}}, so all \code{\link{SimParam}} slots
  and functions are available in addition to \code{SimParamBee}-specific
  slots and functions. Some \code{\link{SimParam}} functions could have
  upgraded behaviour as documented below in line with honeybee biology.
}
\details{
This documentation shows details specific to \code{SimParamBee}. We
  suggest you also read all the options provided by the AlphaSimR
  \code{\link{SimParam}}. Below we show minimal usage cases for each
  \code{SimParamBee} function. Before that, we highlight key points of
  honeybee biology in relation to implementation in the SIMplyBee package.

In honeybees, complementary sex determining (csd) locus impacts sex of
individuals on top of haplo-diploidy, where diploids are queens or workers
and haploids are drones. Heterozygous individuals at the csd locus become
queens or workers, while homozygous individuals at the csd locus become
unviable "drones". Hence genotype status at the csd locus is critical for
honeybee simulations. In SIMplyBee, the csd locus is implemented as a series
of bi-allelic SNP that don't recombine. Technically speaking these are
haplotypes, but since they don't recombine, we call them alleles. By varying
the number of SNP we can tune the number of csd alleles \code{nCsdHaplo}.
Individuals that are homozygous at the csd locus are not viable and removed
from simulation - see \code{\link{pHomBrood}}.
}
\examples{

## ------------------------------------------------
## Method `SimParamBee$new`
## ------------------------------------------------

founderGenomes <- quickHaplo(nInd = 10, nChr = 3, segSites = 10)
SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 2)

# We need enough segregating sites
try(SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 100))
founderGenomes <- quickHaplo(nInd = 10, nChr = 3, segSites = 100)
SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 100)

# We can save the csd locus on chromosome 1 or 2, too, for quick simulations
founderGenomes <- quickHaplo(nInd = 10, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 100)

## ------------------------------------------------
## Method `SimParamBee$addToCaste`
## ------------------------------------------------

founderGenomes <- quickHaplo(nInd = 2, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackPed(isTrackPed = TRUE)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 10)
colony <- createColony(queen = basePop[2], fathers = drones[1:5])
colony <- addWorkers(colony, nInd = 5)
colony <- addDrones(colony, nInd = 5)
colony <- addVirginQueens(colony, nInd = 2)

SP$pedigree
SP$caste

## ------------------------------------------------
## Method `SimParamBee$changeCaste`
## ------------------------------------------------

founderGenomes <- quickHaplo(nInd = 2, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackPed(isTrackPed = TRUE)
basePop <- createVirginQueens(founderGenomes)
SP$pedigree
SP$caste

drones <- createDrones(x = basePop[1], nInd = 10)
colony <- createColony(queen = basePop[2], fathers = drones[1:5])
SP$pedigree
SP$caste
}
\references{
Bovo et al. (2021) Application of Next Generation Semiconductor-Based
  Sequencing for the Identification of Apis mellifera Complementary Sex
  Determiner (csd) Alleles from Honey DNA. Insects, 12(10), 868.
  \url{https://www.mdpi.com/2075-4450/12/10/868}

Zareba et al. (2017) Uneven distribution of complementary sex determiner
  (csd) alleles in Apis mellifera population. Scientific Reports, 7, 2317.
  \url{https://doi.org/10.1038/s41598-017-02629-9}

Lechner et al. (2014) Nucleotide variability at its limit? Insights into
 the number and evolutionary dynamics of the sex-determining specificities
 of the honey bee Apis mellifera Molecular Biology and Evolution, 31,
 272-287. \url{https://academic.oup.com/mbe/article/31/2/272/998263}
}
\section{Super class}{
\code{\link[AlphaSimR:SimParam]{AlphaSimR::SimParam}} -> \code{SimParamBee}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{nWorkers}}{numeric or function, default number of workers
to generate in a colony; if a function, it will be passed to other
functions and work with the internals of those functions - therefore
the function must be defined like \code{function(colony) someCode },
that is, it could work with colony internals or not, and return a
single value. The default value is only to have some workers to work
with - you will want to change this!}

\item{\code{nDrones}}{numeric or function, default number of drones
to generate in a colony; if a function, it will be passed to other
functions and work with the internals of those functions - therefore
the function must be defined like \code{function(colony) someCode },
that is, it could work with colony internals or not, and return a
single value. The default value is only to
have some drones to work with - you will want to change this!}

\item{\code{nVirginQueens}}{numeric or function, default number of virgin queens
to generate in a colony; if a function, it will be passed to other
functions and work with the internals of those functions - therefore
the function must be defined like \code{function(colony) someCode },
that is, it could work with colony internals or not, and return a
single value. The default value is only to have some virgin queens
to work with - you will want to change this!}

\item{\code{nFathers}}{numeric or function, default number of drones
a queen mates with; if a function, it will be passed to other
functions and work with the internals of those functions - therefore
the function must be defined like \code{function(colony) someCode },
that is, it could work with colony internals or not, and return a
single value. The default value is only to have some fathers to work with -
you will want to change this!}

\item{\code{pSwarm}}{numeric or a function, the percentage of workers that leave
with the old queen when the colony swarms; if a function, it will be passed to other
functions and work with the internals of those functions - therefore
the function must be defined like \code{function(colony) someCode },
that is, it could work with colony internals or not, and return a
single value. The default value is only to have some percentage to work with -
you will want to change this!}

\item{\code{pSplit}}{numeric or a function, the percentage of workers that we remove
in a managed split; if a function, it will be passed to other
functions and work with the internals of those functions - therefore
the function must be defined like \code{function(colony) someCode },
that is, it could work with colony internals or not, and return a
single value. The default value is only to have some percentage to work with -
you will want to change this!}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{caste}}{character, caste information for every individual ever
created; active only when \code{SP$setTrackPed(isTrackPed = TRUE)}}

\item{\code{csdChr}}{integer, chromosome of the csd locus}

\item{\code{csdPos}}{numeric, starting position of the csd locus on the \code{csdChr}
chromosome (relative at the moment, but could be in bp in the future)}

\item{\code{nCsdAlleles}}{integer, number of possible csd alleles}

\item{\code{nCsdSites}}{integer, number of segregating sites representing the
csd locus}

\item{\code{csdPosStart}}{integer, starting position of the csd locus}

\item{\code{csdPosStop}}{integer, ending position of the csd locus}

\item{\code{version}}{list, versions of AlphaSimR and SIMplyBee packages used to
generate this object}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{SimParamBee$new()}}
\item \href{#method-addToCaste}{\code{SimParamBee$addToCaste()}}
\item \href{#method-changeCaste}{\code{SimParamBee$changeCaste()}}
\item \href{#method-clone}{\code{SimParamBee$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addSnpChip">}\href{../../AlphaSimR/html/SimParam.html#method-addSnpChip}{\code{AlphaSimR::SimParam$addSnpChip()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addStructuredSnpChip">}\href{../../AlphaSimR/html/SimParam.html#method-addStructuredSnpChip}{\code{AlphaSimR::SimParam$addStructuredSnpChip()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addToPed">}\href{../../AlphaSimR/html/SimParam.html#method-addToPed}{\code{AlphaSimR::SimParam$addToPed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addToRec">}\href{../../AlphaSimR/html/SimParam.html#method-addToRec}{\code{AlphaSimR::SimParam$addToRec()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitA">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitA}{\code{AlphaSimR::SimParam$addTraitA()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitAD">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitAD}{\code{AlphaSimR::SimParam$addTraitAD()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitADE">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitADE}{\code{AlphaSimR::SimParam$addTraitADE()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitADEG">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitADEG}{\code{AlphaSimR::SimParam$addTraitADEG()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitADG">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitADG}{\code{AlphaSimR::SimParam$addTraitADG()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitAE">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitAE}{\code{AlphaSimR::SimParam$addTraitAE()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitAEG">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitAEG}{\code{AlphaSimR::SimParam$addTraitAEG()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="addTraitAG">}\href{../../AlphaSimR/html/SimParam.html#method-addTraitAG}{\code{AlphaSimR::SimParam$addTraitAG()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="ibdHaplo">}\href{../../AlphaSimR/html/SimParam.html#method-ibdHaplo}{\code{AlphaSimR::SimParam$ibdHaplo()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="manAddTrait">}\href{../../AlphaSimR/html/SimParam.html#method-manAddTrait}{\code{AlphaSimR::SimParam$manAddTrait()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="removeTrait">}\href{../../AlphaSimR/html/SimParam.html#method-removeTrait}{\code{AlphaSimR::SimParam$removeTrait()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="rescaleTraits">}\href{../../AlphaSimR/html/SimParam.html#method-rescaleTraits}{\code{AlphaSimR::SimParam$rescaleTraits()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="resetPed">}\href{../../AlphaSimR/html/SimParam.html#method-resetPed}{\code{AlphaSimR::SimParam$resetPed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="restrSegSites">}\href{../../AlphaSimR/html/SimParam.html#method-restrSegSites}{\code{AlphaSimR::SimParam$restrSegSites()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="setCorE">}\href{../../AlphaSimR/html/SimParam.html#method-setCorE}{\code{AlphaSimR::SimParam$setCorE()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="setRecombRatio">}\href{../../AlphaSimR/html/SimParam.html#method-setRecombRatio}{\code{AlphaSimR::SimParam$setRecombRatio()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="setSexes">}\href{../../AlphaSimR/html/SimParam.html#method-setSexes}{\code{AlphaSimR::SimParam$setSexes()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="setTrackPed">}\href{../../AlphaSimR/html/SimParam.html#method-setTrackPed}{\code{AlphaSimR::SimParam$setTrackPed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="setTrackRec">}\href{../../AlphaSimR/html/SimParam.html#method-setTrackRec}{\code{AlphaSimR::SimParam$setTrackRec()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="setVarE">}\href{../../AlphaSimR/html/SimParam.html#method-setVarE}{\code{AlphaSimR::SimParam$setVarE()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="switchFemaleMap">}\href{../../AlphaSimR/html/SimParam.html#method-switchFemaleMap}{\code{AlphaSimR::SimParam$switchFemaleMap()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="switchGenMap">}\href{../../AlphaSimR/html/SimParam.html#method-switchGenMap}{\code{AlphaSimR::SimParam$switchGenMap()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="switchMaleMap">}\href{../../AlphaSimR/html/SimParam.html#method-switchMaleMap}{\code{AlphaSimR::SimParam$switchMaleMap()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="switchTrait">}\href{../../AlphaSimR/html/SimParam.html#method-switchTrait}{\code{AlphaSimR::SimParam$switchTrait()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="AlphaSimR" data-topic="SimParam" data-id="updateLastId">}\href{../../AlphaSimR/html/SimParam.html#method-updateLastId}{\code{AlphaSimR::SimParam$updateLastId()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Starts the process of building a new simulation by creating
  a new SimParamBee object and assigning a founder population to the this
  object. It is recommended that you save the object with the name
  \code{SP}, because subsequent functions will check your global
  environment for an object of this name if their \code{simParamBee}
  arguments are \code{NULL}. This allows you to call these functions
  without explicitly supplying a \code{simParamBee} argument with every
  call.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimParamBee$new(
  founderPop,
  nWorkers = 100,
  nDrones = 10,
  nVirginQueens = 10,
  nFathers = 15,
  pSwarm = 0.5,
  pSplit = 0.3,
  csdChr = 3,
  csdPos = 0.865,
  nCsdAlleles = 128
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{founderPop}}{\code{\link{MapPop-class}}, founder population of
genomes}

\item{\code{nWorkers}}{see \code{\link{SimParamBee}} field \code{nWorkers}}

\item{\code{nDrones}}{see \code{\link{SimParamBee}} field \code{nDrones}}

\item{\code{nVirginQueens}}{see \code{\link{SimParamBee}} field \code{nVirginQueens}}

\item{\code{nFathers}}{see \code{\link{SimParamBee}} field \code{nVirginQueens}}

\item{\code{pSwarm}}{see \code{\link{SimParamBee}} field \code{pSwarm}}

\item{\code{pSplit}}{see \code{\link{SimParamBee}} field \code{pSplit}}

\item{\code{csdChr}}{integer, chromosome that will carry the csd locus, by
default 3, but if there are less chromosomes (for a simplified
simulation), the locus is put on the last available chromosome (1 or
2); if \code{NULL} then csd locus is ignored in the simulation}

\item{\code{csdPos}}{numeric, starting position of the csd locus on the
\code{csdChr} chromosome (relative at the moment, but could be in bp in
the future)}

\item{\code{nCsdAlleles}}{integer, number of possible csd alleles (this
determines how many segregating sites will be needed to represent the
csd locus from the underlying bi-allelic SNP; the minimum number of
bi-allelic SNP needed is \code{log2(nCsdAlleles)}); if set to \code{0}
then \code{csdChr=NULL} is triggered. By default we set \code{nCsdAlleles}
to 128, which is at the upper end of the reported number of csd alleles
(Lechner et al., 2014; Zareba et al., 2017; Bovo et al., 2021).}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{founderGenomes <- quickHaplo(nInd = 10, nChr = 3, segSites = 10)
SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 2)

# We need enough segregating sites
try(SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 100))
founderGenomes <- quickHaplo(nInd = 10, nChr = 3, segSites = 100)
SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 100)

# We can save the csd locus on chromosome 1 or 2, too, for quick simulations
founderGenomes <- quickHaplo(nInd = 10, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes, nCsdAlleles = 100)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addToCaste"></a>}}
\if{latex}{\out{\hypertarget{method-addToCaste}{}}}
\subsection{Method \code{addToCaste()}}{
Store caste information (for internal use only!)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimParamBee$addToCaste(id, caste)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{character, individuals whose caste will be stored}

\item{\code{caste}}{character, single "Q" for queens, "W" for workers, "D" for
drones, "V" for virgin queens, and "F" for fathers}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{founderGenomes <- quickHaplo(nInd = 2, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackPed(isTrackPed = TRUE)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 10)
colony <- createColony(queen = basePop[2], fathers = drones[1:5])
colony <- addWorkers(colony, nInd = 5)
colony <- addDrones(colony, nInd = 5)
colony <- addVirginQueens(colony, nInd = 2)

SP$pedigree
SP$caste
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-changeCaste"></a>}}
\if{latex}{\out{\hypertarget{method-changeCaste}{}}}
\subsection{Method \code{changeCaste()}}{
Change caste information (for internal use only!)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimParamBee$changeCaste(id, caste)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{character, individuals whose caste will be changed}

\item{\code{caste}}{character, single "Q" for queens, "W" for workers, "D" for
drones, "V" for virgin queens, and "F" for fathers}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{founderGenomes <- quickHaplo(nInd = 2, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackPed(isTrackPed = TRUE)
basePop <- createVirginQueens(founderGenomes)
SP$pedigree
SP$caste

drones <- createDrones(x = basePop[1], nInd = 10)
colony <- createColony(queen = basePop[2], fathers = drones[1:5])
SP$pedigree
SP$caste
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimParamBee$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
