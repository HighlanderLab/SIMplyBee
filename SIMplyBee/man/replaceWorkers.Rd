% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L2_Colony.R
\name{replaceWorkers}
\alias{replaceWorkers}
\title{Replace a proportion of workers with new ones}
\usage{
replaceWorkers(x, p = 1, use = "rand", exact = FALSE, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{p}{numeric, proportion of workers to be replaced with new ones}

\item{use}{character, all the options provided by \code{\link{selectInd}} -
guides selection of workers that stay when \code{p < 1}}

\item{exact}{logical, if the csd locus is turned on and exact is \code{TRUE},
replace the workers with the exact specified number of only viable workers
(heterozygous on the csd locus)}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
\code{\link{Colony-class}} or \code{\link{MultiColony-class}} with
  replaced workers
}
\description{
Level 2 function that replaces a proportion of workers with new
  workers from the a Colony or MultiColony object. Useful after events like season change,
  swarming, supersedure, etc. due to the short life span of the workers.
}
\examples{
founderGenomes <- quickHaplo(nInd = 5, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 100)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 5, nFathers = nFathersPoisson)

# Create and cross Colony and MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
apiary <- createMultiColony(basePop[4:5], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[3:4])

# Add workers
colony <- addWorkers(colony, nInd = 20)
apiary <- addWorkers(apiary, nInd = 20)

# Replace workers
getWorkers(colony)@id
colony <- replaceWorkers(colony, p = 0.5)
getWorkers(colony)@id
colony <- replaceWorkers(colony, p = 1.5)
getWorkers(colony)@id

lapply(getWorkers(apiary), FUN = function(x) x@id)
apiary <- replaceWorkers(apiary, p = 0.5)
lapply(getWorkers(apiary), FUN = function(x) x@id)
apiary <- replaceWorkers(apiary, p = 1.5)
lapply(getWorkers(apiary), FUN = function(x) x@id)
}
