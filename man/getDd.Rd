% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getDd}
\alias{getDd}
\alias{getQueenDd}
\alias{getFathersDd}
\alias{getVirginQueensDd}
\alias{getWorkersDd}
\alias{getDronesDd}
\title{Access dominance values of individuals in a caste}
\usage{
getDd(x, caste = NULL, nInd = NULL, collapse = FALSE, simParamBee = NULL)

getQueenDd(x, collapse = FALSE, simParamBee = NULL)

getFathersDd(x, nInd = NULL, collapse = FALSE, simParamBee = NULL)

getVirginQueensDd(x, nInd = NULL, collapse = FALSE, simParamBee = NULL)

getWorkersDd(x, nInd = NULL, collapse = FALSE, simParamBee = NULL)

getDronesDd(x, nInd = NULL, collapse = FALSE, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Pop-class}}, \code{\link{Colony-class}}, or
\code{\link{MultiColony-class}}}

\item{caste}{NULL or character, NULL when \code{x} is a \code{\link{Pop-class}},
and character when \code{x} is a \code{\link{Colony-class}} or
 \code{\link{MultiColony-class}} with the possible values of "queen", "fathers",
 "workers", "drones", "virginQueens", or "all"}

\item{nInd}{numeric, number of individuals to access, if \code{NULL} all
individuals are accessed, otherwise a random sample}

\item{collapse}{logical, if the return value should be a single matrix
with dominance values of all the individuals}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
vector of dominance values when \code{x} is
  \code{\link{Colony-class}} and list of vectors of dominance values when
  \code{x} is \code{\link{MultiColony-class}}, named by colony id when \code{x}
  is \code{\link{MultiColony-class}}
}
\description{
Level 0 function that returns dominance values of
  individuals in a caste.
}
\section{Functions}{
\itemize{
\item \code{getQueenDd()}: Access dominance value of the queen

\item \code{getFathersDd()}: Access dominance values of fathers

\item \code{getVirginQueensDd()}: Access dominance values of virgin queens

\item \code{getWorkersDd()}: Access dominance values of workers

\item \code{getDronesDd()}: Access dominance values of drones

}}
\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$addTraitAD(nQtlPerChr = 10, meanDD = 0.2, varDD = 0.1)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
droneGroups <- pullDroneGroupsFromDCA(drones, n = 10, nDrones = nFathersPoisson)

# Create a Colony and a MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, drones = droneGroups[[1]])
colony <- buildUp(x = colony, nWorkers = 6, nDrones = 3)
colony <- addVirginQueens(x = colony, nInd = 5)

apiary <- createMultiColony(basePop[3:4], n = 2)
apiary <- cross(apiary, drones = droneGroups[c(2, 3)])
apiary <- buildUp(x = apiary, nWorkers = 6, nDrones = 3)
apiary <- addVirginQueens(x = apiary, nInd = 5)

# Input is a population
getDd(x = getQueen(colony))
queens <- getQueen(apiary, collapse = TRUE)
getDd(queens)

# Input is a colony
getDd(colony, caste = "queen")
getQueenDd(colony)

getDd(colony, caste = "fathers")
getDd(colony, caste = "fathers", nInd = 2)
getDd(colony, caste = "fathers", nInd = 2) # random sample!
getFathersDd(colony)
getFathersDd(colony, nInd = 2)

getDd(colony, caste = "virginQueens")
getVirginQueensDd(colony)

getDd(colony, caste = "workers")
getWorkersDd(colony)

getDd(colony, caste = "drones")
getDronesDd(colony)

# Get dominance valued for all individuals
getDd(colony, caste = "all")
# Get all dominance values in a single matrix
getDd(colony, caste = "all", collapse = TRUE)

# Input is a MultiColony
getDd(apiary, caste = "queen")
getQueenDd(apiary)

getDd(apiary, caste = "fathers")
getDd(apiary, caste = "fathers", nInd = 2)
getDd(apiary, caste = "fathers", nInd = 2) # random sample!
getFathersDd(apiary)
getFathersDd(apiary, nInd = 2)

getDd(apiary, caste = "virginQueens")
getVirginQueensDd(apiary)

getDd(apiary, caste = "workers")
getWorkersDd(apiary)

getDd(apiary, caste = "drones")
getDronesDd(apiary)

# Get the dominance values of all individuals either by colony or in a single matrix
getDd(apiary, caste = "all")
getDd(apiary, caste = "all", collapse = TRUE)
}
\seealso{
\code{\link{dd}}
}
