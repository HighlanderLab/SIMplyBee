% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getCsdAlleles}
\alias{getCsdAlleles}
\title{Get csd alleles}
\usage{
getCsdAlleles(
  x,
  nInd = NULL,
  allele = "all",
  dronesHaploid = TRUE,
  collapse = FALSE,
  unique = FALSE,
  simParamBee = NULL
)
}
\arguments{
\item{x}{\code{\link{Pop-class}}, \code{\link{Colony-class}}, or
\code{\link{Colonies-class}}}

\item{nInd}{numeric, for how many individuals; if \code{NULL} all individuals
are taken; this can be useful as a test of sampling individuals}

\item{allele}{character, either "all" for both alleles or an integer for a
single allele, use a value of 1 for female allele and a value of 2 for male
allele}

\item{dronesHaploid}{logical, return haploid result for drones?}

\item{collapse}{logical, if \code{TRUE}, the function will return a set of
csd alleles in either the entire population, colony, or colonies. Default
is \code{FALSE}.}

\item{unique}{logical, return only the unique set of csd alleles. Default
is \code{FALSE}.}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
matrix with haplotypes when \code{x} is \code{\link{Pop-class}}, list
  of matrices with haplotypes when \code{x} is \code{\link{Colony-class}}
  (list nodes named by caste) and list of a list of matrices with haplotypes
  when \code{x} is \code{\link{Colonies-class}}, outer list is named by
  colony id when \code{x} is \code{\link{Colonies-class}}; \code{NULL} when
  \code{x} is \code{NULL}
}
\description{
Level 0 function that returns alleles from the csd locus. See
  \code{\link{SimParamBee}} for more information about the csd locus.
}
\details{
If both collapse and unique are \code{TRUE}, the function
  returns a unique set of csd alleles in the entire population, colony, or
  colonies.
}
\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 3, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 10)
colony1 <- createColony(x = basePop[2])
colony1 <- crossColony(colony1, drones = drones[1:5], nFathers = 5)
colony2 <- createColony(x = basePop[3])
colony2 <- crossColony(colony2, drones = drones[6:10], nFathers = 5)
colony1 <- addWorkers(colony1, nInd = 10)
colony2 <- addWorkers(colony2, nInd = 20)
colony1 <- addDrones(colony1, nInd = 2)
apiary <- c(colony1, colony2)

getCsdAlleles(getQueen(colony1))
getCsdAlleles(getFathers(colony1))
getCsdAlleles(getWorkers(colony1))
getCsdAlleles(getDrones(colony1))

getCsdAlleles(colony1)
getCsdAlleles(colony1, unique = TRUE)
getCsdAlleles(colony1, collapse = TRUE)
getCsdAlleles(colony1, collapse = TRUE, unique = TRUE)

getCsdAlleles(getDrones(colony2))
getCsdAlleles(colony2)

getCsdAlleles(apiary)
getCsdAlleles(apiary, unique = TRUE)
getCsdAlleles(apiary, collapse = TRUE)
getCsdAlleles(apiary, collapse = TRUE, unique = TRUE)

getCsdAlleles(apiary, nInd = 2)
}
