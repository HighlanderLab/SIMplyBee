% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L2_Colony.R
\name{addWorkers}
\alias{addWorkers}
\title{Add (raise) workers in the colony}
\usage{
addWorkers(x, nInd = NULL, new = FALSE, exact = FALSE, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{Colonies-class}}}

\item{nInd}{numeric or function, number of workers; if \code{NULL} then
\code{simParamBee$nWorkers} is used}

\item{new}{logical, should the workers be added a fresh (ignoring currently
present workers in the colony)}

\item{exact}{logical, if the csd locus is turned on and exact is \code{TRUE},
add the exact specified number of only viable workers (heterozygous on the csd
locus)}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
\code{\link{Colony-class}} or \code{\link{Colonies-class}} with
  workers added
}
\description{
Level 2 function that adds (raises) the specified number of
  workers in the colony by crossing the current queen and the fathers. If
  there are already some workers present, new and present workers are
  combined.
}
\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- newPop(founderGenomes)

drones <- createDrones(x = basePop[1], nDronesPerQueen = 10)
colony1 <- createColony(queen = basePop[2], fathers = drones[1:5])
colony2 <- createColony(queen = basePop[3], fathers = drones[6:10])
apiary <- c(colony1, colony2)
addWorkers(colony1, nInd = 20)
nWorkers(addWorkers(apiary, nInd = 20))

# Using a default in SP$nWorkers
# (just to have some workers - change this to your needs!)
addWorkers(colony1)
nWorkers(addWorkers(apiary))

SP$nWorkers <- 15
addWorkers(colony1)
nWorkers(addWorkers(apiary))

nWorkersFun <- function(colony) { rpois(n = 1, lambda = 15) }
addWorkers(colony1, nInd = nWorkersFun)
nWorkers(addWorkers(apiary, nInd = nWorkersFun))

SP$nWorkers <- nWorkersFun
addWorkers(colony1)
nWorkers(addWorkers(apiary))

}
