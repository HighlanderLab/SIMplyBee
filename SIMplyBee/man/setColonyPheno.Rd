% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L2_Colony.R
\name{setColonyPheno}
\alias{setColonyPheno}
\title{Set colony phenotype}
\usage{
setColonyPheno(x, FUN = NULL, ..., simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{FUN}{function, any function that can be run on \code{colony} and
returns colony phenotypes; if \code{NULL} then
\code{\link{SimParamBee}$colonyPheno} is used - if even this is \code{NULL},
then colony phenotype is not set, but phenotypes of colony individuals are}

\item{...}{arguments passed to \code{\link{setPheno}} and \code{FUN}}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
\code{\link{Colony-class}} or \code{\link{MultiColony-class}} with phenotypes
}
\description{
Level 2 function that sets phenotypes for all colony individuals
  (queen, workers, drones, and virgin queens) and for the colony, or each
  colony in a MultiColony object.
}
\details{
When this function is called on a colony, phenotypes for all colony
  individuals and possibly the whole colony are set (or reset if phenotypes
  already exist).
}
\examples{
founderGenomes <- quickHaplo(nInd = 5, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)

# Define two traits that collectively affect colony honey yield:
# 1) queen's effect on colony honey yield, say via pheromone secretion phenotype
# 2) workers' effect on colony honey yield, say via foraging phenotype
# The traits will have a negative genetic correlation of -0.5 and heritability
# of 0.25 (on an individual level)
meanP <- c(20, 0)
nWorkers <- 10
varA <- c(1, 1 / nWorkers)
corA <- matrix(data = c(
  1.0, -0.5,
  -0.5, 1.0
), nrow = 2, byrow = TRUE)
varE <- c(3, 3 / nWorkers)
varA / (varA + varE)
SP$addTraitA(nQtlPerChr = 100, mean = meanP, var = varA, corA = corA)
SP$setVarE(varE = varE)
# TODO: how should we handle the creation of phenotypes when residual variance
#       is set (then we get phenotypes automatically and we should not call
#       setPheno() below - this overwrites previous phenotypes), but when the
#       residual variance is not set, we have to call setPheno()
#       https://github.com/HighlanderLab/SIMplyBee/issues/235

basePop <- createVirginQueens(founderGenomes)
drones <- createDrones(x = basePop[1], nInd = 100)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 5, nFathers = 14)

# Create and cross Colony and MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
colony <- buildUp(colony, nWorkers = nWorkers, nDrones = 3)
apiary <- createMultiColony(basePop[3:5], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[c(2, 3)])
apiary <- buildUp(apiary, nWorkers = nWorkers, nDrones = 3)

# Set phenotypes for all colony individuals
colony <- setColonyPheno(colony)
apiary <- setColonyPheno(apiary)

# Queen's phenotype for both traits
getQueenPheno(colony)
getQueenPheno(apiary)

# Workers' phenotype for both traits
getWorkersPheno(colony)
getWorkersPheno(apiary)

# For the whole colony
getColonyPheno(colony)
getColonyPheno(apiary)

# Set phenotypes for all colony individuals AND Colony
colony <- setColonyPheno(colony, FUN = calcColonyPhenoFromCaste)
getColonyPheno(colony)$colony

# Set phenotypes for all colony individuals AND MultiColony
apiary <- setColonyPheno(apiary, FUN = calcColonyPhenoFromCaste)
sapply(X = getColonyPheno(apiary), FUN = function(x) x$colony)

# Colony phenotype - store the colony function into the SP object
SP$colonyPheno <- calcColonyPhenoFromCaste
getColonyPheno(setColonyPheno(colony))$colony
getColonyPheno(setColonyPheno(colony))$colony
sapply(X = getColonyPheno(setColonyPheno(apiary)), FUN = function(x) x$colony)
sapply(X = getColonyPheno(setColonyPheno(apiary)), FUN = function(x) x$colony)
# phenotype will vary between function calls
}
\seealso{
\code{\link{calcColonyPhenoFromCaste}} as an example for \code{FUN}
}
