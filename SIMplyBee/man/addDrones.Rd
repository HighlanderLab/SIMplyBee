% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L2_Colony.R
\name{addDrones}
\alias{addDrones}
\title{Add (raise) drones in the colony}
\usage{
addDrones(x, nInd = NULL, new = FALSE, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{nInd}{numeric or function, number of drones to be added, but see
\code{new}; if \code{NULL} then \code{\link{SimParamBee}$nDrones} is used}

\item{new}{logical, should the number of drones be added anew or should we
only top-up the existing number of drones to \code{nInd}}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
\code{\link{Colony-class}} or \code{\link{MultiColony-class}} with
  drones added
}
\description{
Level 2 function that adds (raises) the specified number of
  drones to a Colony or MultiColony object by crossing the current queen and the fathers.
  If there are already some drones present, new and present drones are combined.
}
\details{
This function increases queen's \code{nDrones} counter.
}
\examples{
founderGenomes <- quickHaplo(nInd = 5, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 100)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 5, nFathers = nFathersPoisson)

# Create and cross Colony and MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
apiary <- createMultiColony(basePop[4:5], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[3:4])

# Add drones
addDrones(colony, nInd = 20)
nDrones(addDrones(apiary, nInd = 20))

# Using defaults in SP$nWorkers
# (just to have some workers - change this to your needs!)
addDrones(colony)
nDrones(addDrones(apiary))

# Specifying own number
SP$nDrones <- 15
addDrones(colony)
nDrones(addDrones(apiary))
# nDrones will NOT vary between function calls when a constant is used

# Specify a function that will give a number
addDrones(colony, nInd = nDronesPoisson)
nDrones(addDrones(apiary, nInd = nDronesPoisson))
# nDrones will vary between function calls when a function is used

# Store a function or a value in the SP object
SP$nDrones <- nDronesPoisson
addDrones(colony)
nDrones(addDrones(apiary))
# nDrones will vary between function calls when a function is used

# Queen's counters
getMisc(getQueen(addDrones(colony)))

}
