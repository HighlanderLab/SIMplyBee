% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{createCrossPlan}
\alias{createCrossPlan}
\title{Create a cross plan by sampling drone producing
 colonies either at random or according to the distance with the virgin
 colony}
\usage{
createCrossPlan(
  x,
  drones = NULL,
  droneColonies = NULL,
  nDrones = NULL,
  spatial = FALSE,
  radius,
  simParamBee = NULL
)
}
\arguments{
\item{x}{\code{\link{Pop-class}} or code{\link{Colony-class}} or \code{\link{MultiColony-class}},
the object with the virgin queens that need to be crossed. When \code{spatial = TRUE},
the argument needs to be a code{\link{Colony-class}} or \code{\link{MultiColony-class}}
with the location set}

\item{drones}{\code{\link{Pop-class}}, a population drones (resembling a drone
congregation ares) available for mating. When \code{spatial = TRUE}, the user can not
provide drones, but needs to provide drone colonies instead}

\item{droneColonies}{\code{\link{MultiColony-class}}, drone producing colonies
available for mating. When \code{spatial = TRUE},
the object needs to have the location set}

\item{nDrones, }{integer or function, number of drones to sample for each crossing}

\item{spatial}{logical, whether the drone producing colonies should be sampled according
to their distance from the virgin colony (that is, in a radius)}

\item{radius}{numeric, the radius around the virgin colony in which to sample mating partners,
only needed when \code{spatial = TRUE}}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
named list with names being virgin input IDs with each
  list element holding the IDs of selected drone
  producing colonies
}
\description{
Level 0 function that creates a cross plan by sampling
  drone producing colonies to mate with a specific virgin queen
  either at random (\code{spatial = FALSE}) or according to a radius (\code{spatial = TRUE})
}
\examples{
founderGenomes <- quickHaplo(nInd = 1000, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)

# Create three virgin MultiColony objects with locations
virginColonies1 <- createMultiColony(basePop[1:30])
virginColonies1 <- setLocation(virginColonies1,
                               location = Map(c, runif(30, 0, 2*pi),
                                                 runif(30, 0, 2*pi)))
virginColonies2 <- createMultiColony(basePop[31:60])
virginColonies2 <- setLocation(virginColonies2,
                               location = Map(c, runif(30, 0, 2*pi),
                                                 runif(30, 0, 2*pi)))
virginColonies3 <- createMultiColony(basePop[61:90])
virginColonies3 <- setLocation(virginColonies3,
                               location = Map(c, runif(30, 0, 2*pi),
                                                 runif(30, 0, 2*pi)))

# Create drone colonies
droneColonies <- createMultiColony(basePop[121:200])
droneColonies <- setLocation(droneColonies,
                             location = Map(c, runif(80, 0, 2*pi),
                                               runif(80, 0, 2*pi)))

# Create some drones to mate initial drone colonies with
DCA <- createDrones(basePop[201:300], nInd = 20)
# Cross initial virgin drone colonies to the DCA with a random cross plan
randomCrossPlan <- createCrossPlan(x = droneColonies,
                                   drones = DCA,
                                   nDrones = 12,
                                   spatial = FALSE)
droneColonies <- cross(droneColonies,
                       drones = DCA,
                       crossPlan = randomCrossPlan)

# Plot the colonies in space
virginLocations <- as.data.frame(getLocation(c(virginColonies1, virginColonies2, virginColonies3),
                                             collapse= TRUE))
virginLocations$Type <- "Virgin"
droneLocations <- as.data.frame(getLocation(droneColonies, collapse= TRUE))
droneLocations$Type <- "Drone"
locations <- rbind(virginLocations, droneLocations)

ggplot(data = locations, aes(x = V1, y = V2, colour = Type)) + geom_point()

# Cross according to a spatial cross plan according to the colonies' locations
crossPlanSpatial <- createCrossPlan(x = virginColonies1,
                                   droneColonies = droneColonies,
                                   spatial = TRUE,
                                   radius = 1.5)

# Plot the crossing for the first colony in the crossPlan
virginLocations1 <- as.data.frame(getLocation(virginColonies1, collapse= TRUE))
virginLocations1$Type <- "Virgin"
droneLocations <- as.data.frame(getLocation(droneColonies, collapse= TRUE))
droneLocations$Type <- "Drone"
locations1 <- rbind(virginLocations1, droneLocations)

# Blue marks the target virgin colony and blue marks the drone colonies in the chosen radius
ggplot(data = locations1, aes(x = V1, y = V2, shape = Type )) +
  geom_point(colour = ifelse(rownames(locations1) \%in\% crossPlanSpatial[[1]],
                             "red",
                             ifelse(rownames(locations1) == names(crossPlanSpatial)[[1]],
                             "blue", "black")),
             size = 3) +
  xlab("x") + ylab("y")

colonies1 <- cross(x = virginColonies1,
                   droneColonies = droneColonies,
                   crossPlan = crossPlanSpatial)


# Cross according to a cross plan that is created internally within the cross function
# The cross plan is created at random, regardless the location of the colonies
colonies2 <- cross(x = virginColonies2,
                   droneColonies = droneColonies,
                   crossPlan = "create")

# Mate spatially with cross plan created internally by the cross function
colonies3 <- cross(x = virginColonies3,
                   droneColonies = droneColonies,
                   crossPlan = "create",
                   checkMating = "warning",
                   spatial = TRUE,
                   radius = 1)


}
