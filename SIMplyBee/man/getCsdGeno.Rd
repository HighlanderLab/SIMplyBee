% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getCsdGeno}
\alias{getCsdGeno}
\title{Get genotypes from the csd locus}
\usage{
getCsdGeno(x, nInd = NULL, dronesHaploid = TRUE, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Pop-class}}, \code{\link{Colony-class}}, or
\code{\link{MultiColony-class}}}

\item{nInd}{numeric, for how many individuals; if \code{NULL} all individuals
are taken; this can be useful as a test of sampling individuals}

\item{dronesHaploid}{logical, return haploid result for drones?}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
matrix with genotypes when \code{x} is \code{\link{Pop-class}}, list
  of matrices with genotypes when \code{x} is \code{\link{Colony-class}}
  (list nodes named by caste) and list of a list of matrices with genotypes
  when \code{x} is \code{\link{MultiColony-class}}, outer list is named by
  colony id when \code{x} is \code{\link{MultiColony-class}}; \code{NULL} when
  \code{x} is \code{NULL}
}
\description{
Level 0 function that returns genotypes from the csd locus. See
  \code{\link{SimParamBee}} for more information about the csd locus and how
  we have implemented it.
}
\details{
The returned genotypes are spanning multiple bi-allelic SNP of
  a non-recombining csd locus / haplotype. In most cases you will want to use
  \code{\link{getCsdAlleles}}.
}
\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 10, nFathers = nFathersPoisson)

# Create a Colony and a MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
colony <- buildUp(x = colony, nWorkers = 6, nDrones = 3)
colony <- addVirginQueens(x = colony, nInd = 4)

apiary <- createMultiColony(basePop[3:4], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[c(2, 3)])
apiary <- buildUp(x = apiary, nWorkers = 6, nDrones = 3)
apiary <- addVirginQueens(x = apiary, nInd = 5)

# Use getCsdGeno on a Population
getCsdGeno(getQueen(colony))
getCsdGeno(getFathers(colony))
getCsdGeno(getWorkers(colony))

# Using dronesHaploid = TRUE returns drones as haploids instead of double haploids
getCsdGeno(getDrones(colony), nInd = 3, dronesHaploid = TRUE)
# Using dronesHaploid = FALSE returns drones as double haploids
getCsdGeno(getDrones(colony), nInd = 3, dronesHaploid = FALSE)

# Use getCsdGeno on a Colony
getCsdGeno(colony)

# Compare the use of the dronesHaploid parameter
getCsdGeno(colony, nInd = 4, dronesHaploid = TRUE)
getCsdGeno(colony, nInd = 4, dronesHaploid = FALSE)

# Use getCsdGeno on a MultiColony
getCsdGeno(apiary)
getCsdGeno(apiary, nInd = 2)
}
