% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{calcBeeGRMIbs}
\alias{calcBeeGRMIbs}
\alias{calcBeeAlleleFreq}
\title{Calculate Genomic Relatedness Matrix (GRM) for honeybees from
  Identical By State genomic data}
\usage{
calcBeeGRMIbs(x, sex, alleleFreq = NULL)

calcBeeAlleleFreq(x, sex)
}
\arguments{
\item{x}{\code{\link{matrix}} of genotypes represented as allele dosage coded
as 0, 1, or 2 in females (queens or workers) and as 0 or 1 in males
(fathers or drones); individuals are in rows and sites are in columns; no
missing values are allowed (this is not checked - you will get NAs!)}

\item{sex}{character vector denoting sex for individuals with genotypes in
\code{x} - \code{"F"} for female and \code{"M"} for male}

\item{alleleFreq}{numeric, vector of allele frequencies for the sites in
\code{x}; if \code{NULL}, then \code{\link{calcBeeAlleleFreq}} is used}
}
\value{
matrix of genomic relatedness coefficients
}
\description{
Level 0 function that returns Genomic Relatedness Matrix (GRM)
  for honeybees from Identical By State genomic data (bi-allelic SNP
  represented as allele dosages) following the method for the sex X
  chromosome (Druet and Legarra, 2020)
}
\section{Functions}{
\itemize{
\item \code{calcBeeAlleleFreq()}: Calculate allele frequencies from honeybee genotypes

}}
\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)

basePop <- createVirginQueens(founderGenomes)
drones <- createDrones(x = basePop[1], nInd = 1000)
droneGroups <- pullDroneGroupsFromDCA(drones, n = 10, nDrones = nFathersPoisson)
apiary <- createMultiColony(basePop[2:3], n = 2)
apiary <- cross(x = apiary, drones = droneGroups[c(2, 3)])
apiary <- buildUp(x = apiary, nWorkers = 6, nDrones = 3)
apiary <- addVirginQueens(x = apiary, nInd = 5)

geno <- getSegSiteGeno(apiary[[1]], collapse = TRUE)
genoMeanW <- apply(X = getWorkersSegSiteGeno(apiary[[1]]), MARGIN = 2, FUN = mean)
genoMeanD <- apply(X = getDronesSegSiteGeno(apiary[[1]]), MARGIN = 2, FUN = mean)

geno <- rbind(geno, genoMeanW, genoMeanD)
n <- length(rownames(geno))
rownames(geno)[c(n - 1, n)] <- c("mw", "md")

sex <- getCasteSex(x = apiary[[1]], collapse = TRUE)
sex <- c(sex, "F", "M")

GRM <- calcBeeGRMIbs(x = geno, sex = sex)

# library("Matrix"); image(as(GRM, "Matrix"))

x <- diag(GRM)
hist(x)
summary(x)

x <- GRM[lower.tri(x = GRM, diag = FALSE)]
hist(x)
summary(x)

ids <- getCasteId(apiary[[1]])
idQueen <- ids$queen
idFathers <- ids$fathers
idWorkers <- ids$workers
idDrones <- ids$drones
idVirginQueens <- ids$virginQueens
mw <- "mw"
md <- "md"

# Queen vs others
GRM[idQueen, idFathers]
GRM[idQueen, idWorkers]
GRM[idQueen, idDrones]
GRM[idQueen, idVirginQueens]
GRM[idQueen, mw]
GRM[idQueen, md]

# Fathers vs others
GRM[idFathers, idFathers]
GRM[idFathers, idWorkers]
GRM[idFathers, idDrones]
GRM[idFathers, idVirginQueens]
GRM[idFathers, mw]
GRM[idFathers, md]

# Workers vs others
GRM[idWorkers, idWorkers]
GRM[idWorkers, idDrones]
GRM[idWorkers, idVirginQueens]
GRM[idWorkers, mw]
GRM[idWorkers, md]

# Calculating allele frequencies ourselves (say, to "shift" base population)
aF <- calcBeeAlleleFreq(x = geno, sex = sex)
hist(aF)
GRM2 <- calcBeeGRMIbs(x = geno, sex = sex, alleleFreq = aF)
stopifnot(identical(GRM2, GRM))
}
\references{
Druet and Legarra (2020) Theoretical and empirical comparisons of
  expected and realized relationships for the X-chromosome. Genetics
  Selection Evolution, 52:50 \url{https://doi.org/10.1186/s12711-020-00570-6}
}
