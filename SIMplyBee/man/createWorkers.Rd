% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L1_Pop.R
\name{createWorkers}
\alias{createWorkers}
\title{Creates workers from the colony}
\usage{
createWorkers(x, nInd = NULL, exact = FALSE, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{Colonies-class}}}

\item{nInd}{numeric or function, number of workers created; if \code{NULL}
then \code{\link{SimParamBee}$nWorkers} is used}

\item{exact}{logical, if the csd locus is active and exact is \code{TRUE},
create the exactly specified number of viable workers (heterozygous on the
csd locus)}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
when \code{x} is \code{\link{Colony-class}} return is a list with two
  nodes named \code{workers} (a \code{\link{Pop-class}}) and \code{nHomBrood}
  (a numeric); when \code{x} is \code{\link{Colonies-class}} return is a list
  of lists named by colony ID
}
\description{
Level 1 function that creates the specified number of workers
  from the colony by mating the colony queen and the fathers. If csd locus is
  active, it takes it into account and any csd homozygotes are removed and
  counted towards homozygous brood.
}
\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackPed(isTrackPed = TRUE)
SP$setTrackRec(isTrackRec = TRUE)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 10)
colony1 <- createColony(x = basePop[2])
colony1 <- crossColony(colony1, drones = drones[1:5], nFathers = 5)
colony2 <- createColony(x = basePop[3])
colony2 <- crossColony(colony2, drones = drones[6:10], nFathers = 5)
apiary <- c(colony1, colony2)

(tmp <- createWorkers(colony1, nInd = 10))
colony1@queen@id
tmp$workers@id
tmp$workers@sex
tmp$workers@misc
tmp$workers@mother
tmp$workers@father
SP$pedigree
SP$recHist
SP$recHist[[23]][[1]][1]
SP$recHist[[23]][[1]][2]
SP$caste

createWorkers(apiary, nInd = 10)

# Using a default in SP$nWorkers
# (just to have some workers - change this to your needs!)
createWorkers(colony1)
createWorkers(apiary)

# Specify own number
SP$nWorkers <- 15
createWorkers(colony1) # nWorkers will NOT vary between function calls
createWorkers(apiary) # nWorkers will NOT vary between function calls

# Specify a function that will give a number
nWorkersFun <- function(colony) {
  rpois(n = 1, lambda = 15)
}
createWorkers(colony1, nInd = nWorkersFun) # nWorkers will vary between function calls
createWorkers(apiary, nInd = nWorkersFun) # nWorkers will vary between function calls

# Store a function or a value in the SP object
SP$nWorkers <- nWorkersFun
createWorkers(colony1) # nWorkers will vary between function calls
createWorkers(apiary) # nWorkers will vary between function calls

# Inbred virgin queen with her brothers to generate csd homozygous brood
colony3 <- createColony(createVirginQueens(colony1, nInd = 1))
colony3 <- crossColony(colony3, drones = createDrones(colony1, nInd = 5),
                       nFathers = 5)
# Check the expected csd homozygosity
pHomBrood(colony3)

# Evaluate the realised csd homozygosity
createWorkers(colony3, nInd = 100) # nHomBrood will vary between function calls
createWorkers(colony3, nInd = 100) # nHomBrood will vary between function calls
}
