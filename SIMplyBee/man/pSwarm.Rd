% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class-SimParamBee.R
\name{pSwarmUnif}
\alias{pSwarmUnif}
\alias{pSwarmColonyStrength}
\title{Sample the proportion of workers in a swarm}
\usage{
pSwarmUnif(colony, n = 1, min = 0.4, max = 0.6)

pSwarmColonyStrength(colony, n = 1, nWorkersFull = 100, scale = 1)
}
\arguments{
\item{colony}{\code{\link{Colony-class}}}

\item{n}{integer, number of samples}

\item{min}{numeric, lower limit for \code{pSwarmUnif}}

\item{max}{numeric, upper limit for \code{pSwarmUnif}}

\item{nWorkersFull}{numeric, average number of workers in a full/strong
colony for \code{pSplitColonyStrength} (actual number can go beyond this
value)}

\item{scale}{numeric, scaling of numbers in \code{pSwarmColonyStrength}
to avoid to narrow range when colonies have a large number of bees (in that
case change \code{nWorkersFull} too!)}
}
\value{
numeric, proportion of workers in a swarm
}
\description{
Sample the proportion of workers in a swarm when \code{p = NULL}
  (see \code{\link{SimParamBee}$pSwarm}) - this is just an example and you
  will likely want to define your own sampling functions!
}
\details{
\code{pSwarmUnif} samples from a uniform distribution between values
  0.4 and 0.6 irrespective of colony strength. \code{pSwarmColonyStrength}
  samples from a beta distribution with a mean of \code{a / (a + b)}, where
  \code{a = nWorkers + nWorkersFull} and \code{b = nWorkers}. This beta
  sampling mimics larger swarms for strong colonies and smaller swarms for
  weak colonies - see examples - this is just an example, not based on actual
  data! # TODO: should we flip the pattern?

  The \code{nWorkersFull} default value used in this function is geared
  towards a situation where we simulate ~100 workers per colony (down-scaled
  simulation for efficiency). If you simulate more workers, you should change
  the default accordingly.
}
\section{Functions}{
\itemize{
\item \code{pSwarmColonyStrength}: Sample the proportion of workers in a swarm based on
colony strength
}}

\examples{
pSwarmUnif()
pSwarmUnif()
p <- pSwarmUnif(n = 1000)
hist(p, breaks = seq(from = 0, to = 1, by = 0.01), xlim = c(0, 1))

# Example for pSwarmColonyStrength()
founderGenomes <- quickHaplo(nInd = 2, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)
drones <- createDrones(x = basePop[1], nInd = 5)
colony <- createColony(x = basePop[2])
colony <- crossColony(colony, drones = drones, nFathers = 5)
colony <- addWorkers(colony, nInd = 10)
nWorkers(colony) # weak colony
pSwarmColonyStrength(colony)
pSwarmColonyStrength(colony)
colony <- addWorkers(colony, nInd = 100)
nWorkers(colony) # strong colony
pSwarmColonyStrength(colony)
pSwarmColonyStrength(colony)

# Logic behind pSwarmColonyStrength()
nWorkersFull <- 100
nWorkers <- 0:200
pSwarm <- 1 - rbeta(n = length(nWorkers),
                    shape1 = nWorkers + nWorkersFull,
                    shape2 = nWorkers)
plot(pSwarm ~ nWorkers, ylim = c(0, 1)); abline(v = nWorkersFull)
pStay <- 1 - pSwarm
plot(pStay ~ nWorkers, ylim = c(0, 1)); abline(v = nWorkersFull)
# TODO: should we flip the pattern?
}
\seealso{
\code{\link{SimParamBee}} field \code{pSwarm}
}
