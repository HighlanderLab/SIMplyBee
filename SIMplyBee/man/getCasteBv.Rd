% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getCasteBv}
\alias{getCasteBv}
\alias{getQueensBv}
\alias{getFathersBv}
\alias{getVirginQueensBv}
\alias{getWorkersBv}
\alias{getDronesBv}
\title{Access breeding values of individuals in a caste}
\usage{
getCasteBv(x, caste, nInd = NULL, simParamBee = NULL)

getQueensBv(x, simParamBee = NULL)

getFathersBv(x, nInd = NULL, simParamBee = NULL)

getVirginQueensBv(x, nInd = NULL, simParamBee = NULL)

getWorkersBv(x, nInd = NULL, simParamBee = NULL)

getDronesBv(x, nInd = NULL, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{caste}{character, "queen", "fathers", "workers", "drones", or
"virginQueens"}

\item{nInd}{numeric, number of individuals to access, if \code{NULL} all
individuals are accessed, otherwise a random sample}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
vector of breeding values when \code{x} is \code{\link{Colony-class}}
  and list of vectors of breeding values when \code{x} is
  \code{\link{MultiColony-class}}, named by colony id when \code{x} is
  \code{\link{MultiColony-class}}
}
\description{
Level 0 function that returns breeding values of individuals in
  a caste.
}
\section{Functions}{
\itemize{
\item \code{getQueensBv}: Access breeding value of the queen

\item \code{getFathersBv}: Access breeding values of fathers

\item \code{getVirginQueensBv}: Access breeding values of virgin queens

\item \code{getWorkersBv}: Access breeding values of workers

\item \code{getDronesBv}: Access breeding values of drones
}}

\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackRec(TRUE)
SP$setTrackPed(isTrackPed = TRUE)
SP$addTraitA(10)
SP$addSnpChip(5)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 10, nFathers = nFathersPoisson)

# Create a Colony and a MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
colony <- buildUp(x = colony)
colony <- addVirginQueens(x = colony, nInd = 5)

apiary <- createMultiColony(basePop[3:4], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[c(2, 3)])
apiary <- buildUp(x = apiary)
apiary <- addVirginQueens(x = apiary, nInd = 5)

getCasteBv(colony, caste = "queen")
getQueensBv(colony)

getCasteBv(colony, caste = "fathers")
getCasteBv(colony, caste = "fathers", nInd = 2)
getCasteBv(colony, caste = "fathers", nInd = 2)
getFathersBv(colony)
getFathersBv(colony, nInd = 2)

getCasteBv(colony, caste = "virginQueens")
getVirginQueensBv(colony)

getCasteBv(colony, caste = "workers")
getWorkersBv(colony)

getCasteBv(colony, caste = "drones")
getDronesBv(colony)

getCasteBv(apiary, caste = "queen")
getQueensBv(apiary)

getCasteBv(apiary, caste = "fathers")
getCasteBv(apiary, caste = "fathers", nInd = 2)
getCasteBv(apiary, caste = "fathers", nInd = 2)
getFathersBv(apiary)
getFathersBv(apiary, nInd = 2)

getCasteBv(apiary, caste = "virginQueens")
getVirginQueensBv(apiary)

getCasteBv(apiary, caste = "workers")
getWorkersBv(apiary)

getCasteBv(apiary, caste = "drones")
getDronesBv(apiary)
}
\seealso{
\code{\link{bv}}
}
