% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class-SimParamBee.R
\name{pSplitUnif}
\alias{pSplitUnif}
\alias{pSplitColonyStrength}
\title{Sample the proportion of removed workers in a managed
  split}
\usage{
pSplitUnif(colony, n = 1, min = 0.2, max = 0.4)

pSplitColonyStrength(colony, n = 1, nWorkersFull = 100, scale = 1)
}
\arguments{
\item{colony}{\code{\link{Colony-class}}}

\item{n}{integer, number of samples}

\item{min}{numeric, lower limit for \code{pSplitUnif}}

\item{max}{numeric, upper limit for \code{pSplitUnif}}

\item{nWorkersFull}{numeric, average number of workers in a full/strong
colony for \code{pSplitColonyStrength} (actual number can go beyond this
value)}

\item{scale}{numeric, scaling of numbers in \code{pSplitColonyStrength}
to avoid to narrow range when colonies have a large number of bees (in that
case change \code{nWorkersFull} too!)}
}
\value{
numeric, proportion of removed workers
}
\description{
Sample the proportion of removed workers in a managed split when
  \code{p = NULL} - (see \code{\link{SimParamBee}$pSplit}) - this is just an
  example and you will likely want to define your own sampling functions!
}
\details{
\code{pSplitUnif} samples from a uniform distribution between values
  0.2 and 0.4 irrespective of colony strength. \code{pSplitColonyStrength}
  samples from a beta distribution with mean \code{a / (a + b)}, where
  \code{a = nWorkers + nWorkersFull} and \code{b = nWorkers}. This beta
  sampling mimics larger splits for strong colonies and smaller splits for
  weak colonies - see examples - this is just an example, not based on actual
  data!

  The \code{nWorkersFull} default value used in this function is geared
  towards a situation where we simulate ~100 workers per colony (down-scaled
  simulation for efficiency). If you simulate more workers, you should change
  the default accordingly.
}
\section{Functions}{
\itemize{
\item \code{pSplitColonyStrength}: Sample the proportion of removed workers in a managed
split based on colony strength
}}

\examples{
pSplitUnif()
pSplitUnif()
p <- pSplitUnif(n = 1000)
hist(p, breaks = seq(from = 0, to = 1, by = 0.01), xlim = c(0, 1))

# Example for pSplitColonyStrength()
founderGenomes <- quickHaplo(nInd = 2, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)
drones <- createDrones(x = basePop[1], nInd = 5)
colony <- createColony(x = basePop[2])
colony <- crossColony(colony, drones = drones, nFathers = 5)
colony <- addWorkers(colony, nInd = 10)
nWorkers(colony) # weak colony
pSplitColonyStrength(colony)
pSplitColonyStrength(colony)
colony <- addWorkers(colony, nInd = 100)
nWorkers(colony) # strong colony
pSplitColonyStrength(colony)
pSplitColonyStrength(colony)

# Logic behind pSplitColonyStrength()
nWorkersFull <- 100
nWorkers <- 0:200
pSplit <- 1 - rbeta(
  n = length(nWorkers),
  shape1 = nWorkers + nWorkersFull,
  shape2 = nWorkers
)
plot(pSplit ~ nWorkers, ylim = c(0, 1))
abline(v = nWorkersFull)
pKeep <- 1 - pSplit
plot(pKeep ~ nWorkers, ylim = c(0, 1))
abline(v = nWorkersFull)
}
\seealso{
\code{\link{SimParamBee}} field \code{pSplit}
}
