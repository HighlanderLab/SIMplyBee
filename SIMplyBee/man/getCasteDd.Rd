% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getCasteDd}
\alias{getCasteDd}
\alias{getQueensDd}
\alias{getFathersDd}
\alias{getVirginQueensDd}
\alias{getWorkersDd}
\alias{getDronesDd}
\title{Access dominance deviations of individuals in a caste}
\usage{
getCasteDd(x, caste, nInd = NULL, simParamBee = NULL)

getQueensDd(x, simParamBee = NULL)

getFathersDd(x, nInd = NULL, simParamBee = NULL)

getVirginQueensDd(x, nInd = NULL, simParamBee = NULL)

getWorkersDd(x, nInd = NULL, simParamBee = NULL)

getDronesDd(x, nInd = NULL, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{caste}{character, "queen", "fathers", "workers", "drones", or
"virginQueens"}

\item{nInd}{numeric, number of individuals to access, if \code{NULL} all
individuals are accessed, otherwise a random sample}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
vector of dominance deviations when \code{x} is
  \code{\link{Colony-class}} and list of vectors of dominance deviations when
  \code{x} is \code{\link{MultiColony-class}}, named by colony id when \code{x}
  is \code{\link{MultiColony-class}}
}
\description{
Level 0 function that returns dominance deviations of
  individuals in a caste.
}
\section{Functions}{
\itemize{
\item \code{getQueensDd}: Access dominance deviation of the queen

\item \code{getFathersDd}: Access dominance deviations of fathers

\item \code{getVirginQueensDd}: Access dominance deviations of virgin queens

\item \code{getWorkersDd}: Access dominance deviations of workers

\item \code{getDronesDd}: Access dominance deviations of drones
}}

\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$addTraitAD(nQtlPerChr = 10, meanDD = 0.2, varDD = 0.1)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 10, nFathers = nFathersPoisson)

# Create a Colony and a MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
colony <- buildUp(x = colony)
colony <- addVirginQueens(x = colony, nInd = 5)

apiary <- createMultiColony(basePop[3:4], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[c(2, 3)])
apiary <- buildUp(x = apiary)
apiary <- addVirginQueens(x = apiary, nInd = 5)

getCasteDd(colony, caste = "queen")
getQueensDd(colony)

getCasteDd(colony, caste = "fathers")
getCasteDd(colony, caste = "fathers", nInd = 2)
getCasteDd(colony, caste = "fathers", nInd = 2)
getFathersDd(colony)
getFathersDd(colony, nInd = 2)

getCasteDd(colony, caste = "virginQueens")
getVirginQueensDd(colony)

getCasteDd(colony, caste = "workers")
getWorkersDd(colony)

getCasteDd(colony, caste = "drones")
getDronesDd(colony)

getCasteDd(apiary, caste = "queen")
getQueensDd(apiary)

getCasteDd(apiary, caste = "fathers")
getCasteDd(apiary, caste = "fathers", nInd = 2)
getCasteDd(apiary, caste = "fathers", nInd = 2)
getFathersDd(apiary)
getFathersDd(apiary, nInd = 2)

getCasteDd(apiary, caste = "virginQueens")
getVirginQueensDd(apiary)

getCasteDd(apiary, caste = "workers")
getWorkersDd(apiary)

getCasteDd(apiary, caste = "drones")
getDronesDd(apiary)
}
\seealso{
\code{\link{dd}}
}
