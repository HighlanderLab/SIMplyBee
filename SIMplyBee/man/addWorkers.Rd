% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L2_Colony.R
\name{addWorkers}
\alias{addWorkers}
\title{Add (raise) workers in the colony}
\usage{
addWorkers(x, nInd = NULL, new = FALSE, exact = FALSE, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{Colonies-class}}}

\item{nInd}{numeric or function, number of workers to be added, but see
\code{new}; if \code{NULL} then \code{\link{SimParamBee}$nWorkers} is used}

\item{new}{logical, should the number of workers be added anew or should we
only top-up the existing number of workers to \code{nInd}}

\item{exact}{logical, if the csd locus is turned on and exact is \code{TRUE},
we add the exact specified number of viable workers (heterozygous at the
csd locus)}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
\code{\link{Colony-class}} or \code{\link{Colonies-class}} with
  workers added
}
\description{
Level 2 function that adds (raises) the specified number of
  workers in the colony by crossing the current queen and the fathers. If
  there are already some workers present, new and present workers are
  combined.
}
\details{
This function increases queen's \code{nWorkers} and \code{nHomBrood}
  counters.
}
\examples{
founderGenomes <- quickHaplo(nInd = 3, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 10)
colony1 <- createColony(x = basePop[2])
colony1 <- crossColony(colony1, drones = drones[1:5], nFathers = 5)
colony2 <- createColony(x = basePop[3])
colony2 <- crossColony(colony2, drones = drones[6:10], nFathers = 5)
apiary <- c(colony1, colony2)
addWorkers(colony1, nInd = 20)
nWorkers(addWorkers(apiary, nInd = 20))

# Using a default in SP$nWorkers
# (just to have some workers - change this to your needs!)
addWorkers(colony1)
nWorkers(addWorkers(apiary))

# Specify own number
SP$nWorkers <- 15
addWorkers(colony1)
nWorkers(addWorkers(apiary))
# nWorkers will NOT vary between function calls when a constant is used

# Specify a function that will give a number
addWorkers(colony1, nInd = nWorkersPoisson)
nWorkers(addWorkers(apiary, nInd = nWorkersPoisson))
# nWorkers will vary between function calls when a function is used

# Store a function or a value in the SP object
SP$nWorkers <- nWorkersPoisson
addWorkers(colony1)
nWorkers(addWorkers(apiary))
# nWorkers will vary between function calls when a function is used

# Queen's counters
getMisc(getQueen(addWorkers(colony1)))
getMisc(getQueen(addWorkers(colony2)))
}
