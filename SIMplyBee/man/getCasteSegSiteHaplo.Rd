% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getCasteSegSiteHaplo}
\alias{getCasteSegSiteHaplo}
\alias{getQueensSegSiteHaplo}
\alias{getFathersSegSiteHaplo}
\alias{getVirginQueensSegSiteHaplo}
\alias{getWorkersSegSiteHaplo}
\alias{getDronesSegSiteHaplo}
\title{Access haplotypes for all segregating sites of individuals in a
  caste}
\usage{
getCasteSegSiteHaplo(
  x,
  caste,
  nInd = NULL,
  haplo = "all",
  chr = NULL,
  dronesHaploid = TRUE,
  simParamBee = NULL
)

getQueensSegSiteHaplo(x, haplo = "all", chr = NULL, simParamBee = NULL)

getFathersSegSiteHaplo(
  x,
  nInd = NULL,
  haplo = "all",
  chr = NULL,
  dronesHaploid = TRUE,
  simParamBee = NULL
)

getVirginQueensSegSiteHaplo(
  x,
  nInd = NULL,
  haplo = "all",
  chr = NULL,
  simParamBee = NULL
)

getWorkersSegSiteHaplo(
  x,
  nInd = NULL,
  haplo = "all",
  chr = NULL,
  simParamBee = NULL
)

getDronesSegSiteHaplo(
  x,
  nInd = NULL,
  haplo = "all",
  chr = NULL,
  dronesHaploid = TRUE,
  simParamBee = NULL
)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{caste}{character, "queen", "fathers", "workers", "drones", or
"virginQueens"}

\item{nInd}{numeric, number of individuals to access, if \code{NULL} all
individuals are accessed, otherwise a random sample}

\item{haplo}{character, either "all" for all haplotypes or an integer for a
single set of haplotypes, use a value of 1 for female haplotypes and a
value of 2 for male haplotypes}

\item{chr}{numeric, chromosomes to retrieve, if \code{NULL}, all chromosome
are retrieved}

\item{dronesHaploid}{logical, return haploid result for drones?}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
matrix with haplotypes when \code{x} is \code{\link{Colony-class}}
  and list of matrices with haplotypes when \code{x} is
  \code{\link{MultiColony-class}}, named by colony id when \code{x} is
  \code{\link{MultiColony-class}}
}
\description{
Level 0 function that returns haplotypes for all segregating
  sites of individuals in a caste.
}
\section{Functions}{
\itemize{
\item \code{getQueensSegSiteHaplo}: Access haplotype data for all segregating sites of the queen

\item \code{getFathersSegSiteHaplo}: Access haplotype data for all segregating sites of fathers

\item \code{getVirginQueensSegSiteHaplo}: Access haplotype data for all segregating sites of virgin queens

\item \code{getWorkersSegSiteHaplo}: Access haplotype data for all segregating sites of workers

\item \code{getDronesSegSiteHaplo}: Access haplotype data for all segregating sites of drones
}}

\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$setTrackRec(TRUE)
SP$setTrackPed(isTrackPed = TRUE)
SP$addTraitA(10)
SP$addSnpChip(5)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 10, nFathers = nFathersPoisson)

# Create a Colony and a MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
colony <- buildUp(x = colony)
colony <- addVirginQueens(x = colony, nInd = 5)

apiary <- createMultiColony(basePop[3:4], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[c(2, 3)])
apiary <- buildUp(x = apiary)
apiary <- addVirginQueens(x = apiary, nInd = 5)

getCasteSegSiteHaplo(colony, caste = "queen")
getQueensSegSiteHaplo(colony)

getCasteSegSiteHaplo(colony, caste = "fathers")
getCasteSegSiteHaplo(colony, caste = "fathers", nInd = 2)
getCasteSegSiteHaplo(colony, caste = "fathers", nInd = 2)
getFathersSegSiteHaplo(colony)
getFathersSegSiteHaplo(colony, nInd = 2)

getCasteSegSiteHaplo(colony, caste = "virginQueens")
getVirginQueensSegSiteHaplo(colony)

getCasteSegSiteHaplo(colony, caste = "workers")
getWorkersSegSiteHaplo(colony)

getCasteSegSiteHaplo(colony, caste = "drones")
getDronesSegSiteHaplo(colony)

getCasteSegSiteHaplo(apiary, caste = "queen")
getQueensSegSiteHaplo(apiary)

getCasteSegSiteHaplo(apiary, caste = "fathers")
getCasteSegSiteHaplo(apiary, caste = "fathers", nInd = 2)
getCasteSegSiteHaplo(apiary, caste = "fathers", nInd = 2)
getFathersSegSiteHaplo(apiary)
getFathersSegSiteHaplo(apiary, nInd = 2)

getCasteSegSiteHaplo(apiary, caste = "virginQueens")
getVirginQueensSegSiteHaplo(apiary)

getCasteSegSiteHaplo(apiary, caste = "workers")
getWorkersSegSiteHaplo(apiary)

getCasteSegSiteHaplo(apiary, caste = "drones")
getDronesSegSiteHaplo(apiary)
}
\seealso{
\code{\link{getSegSiteHaplo}} and \code{\link{pullSegSiteHaplo}}
}
