% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getCasteAa}
\alias{getCasteAa}
\alias{getQueenAa}
\alias{getFathersAa}
\alias{getVirginQueensAa}
\alias{getWorkersAa}
\alias{getDronesAa}
\title{Access epistasis deviations of individuals in a caste}
\usage{
getCasteAa(x, caste, nInd = NULL, simParamBee = NULL)

getQueenAa(x, simParamBee = NULL)

getFathersAa(x, nInd = NULL, simParamBee = NULL)

getVirginQueensAa(x, nInd = NULL, simParamBee = NULL)

getWorkersAa(x, nInd = NULL, simParamBee = NULL)

getDronesAa(x, nInd = NULL, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Colony-class}} or \code{\link{MultiColony-class}}}

\item{caste}{character, "queen", "fathers", "workers", "drones", or
"virginQueens"}

\item{nInd}{numeric, number of individuals to access, if \code{NULL} all
individuals are accessed, otherwise a random sample}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
vector of epistasis deviations when \code{x} is
  \code{\link{Colony-class}} and list of vectors of epistasis deviations when
  \code{x} is \code{\link{MultiColony-class}}, named by colony id when \code{x}
  is \code{\link{MultiColony-class}}
}
\description{
Level 0 function that returns epistasis deviations of
  individuals in a caste.
}
\section{Functions}{
\itemize{
\item \code{getQueenAa()}: Access epistasis deviation of the queen

\item \code{getFathersAa()}: Access epistasis deviations of fathers

\item \code{getVirginQueensAa()}: Access epistasis deviations of virgin queens

\item \code{getWorkersAa()}: Access epistasis deviations of workers

\item \code{getDronesAa()}: Access epistasis deviations of drones

}}
\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$addTraitADE(nQtlPerChr = 10, meanDD = 0.2, varDD = 0.1, relAA = 0.5)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
fatherGroups <- pullDroneGroupsFromDCA(drones, n = 10, nFathers = nFathersPoisson)

# Create a Colony and a MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, fathers = fatherGroups[[1]])
colony <- buildUp(x = colony, nWorkers = 6, nDrones = 3)
colony <- addVirginQueens(x = colony, nInd = 5)

apiary <- createMultiColony(basePop[3:4], n = 2)
apiary <- cross(apiary, fathers = fatherGroups[c(2, 3)])
apiary <- buildUp(x = apiary, nWorkers = 6, nDrones = 3)
apiary <- addVirginQueens(x = apiary, nInd = 5)

getCasteAa(colony, caste = "queen")
getQueenAa(colony)

getCasteAa(colony, caste = "fathers")
getCasteAa(colony, caste = "fathers", nInd = 2)
getCasteAa(colony, caste = "fathers", nInd = 2) # random sample!
getFathersAa(colony)
getFathersAa(colony, nInd = 2)

getCasteAa(colony, caste = "virginQueens")
getVirginQueensAa(colony)

getCasteAa(colony, caste = "workers")
getWorkersAa(colony)

getCasteAa(colony, caste = "drones")
getDronesAa(colony)

getCasteAa(apiary, caste = "queen")
getQueenAa(apiary)

getCasteAa(apiary, caste = "fathers")
getCasteAa(apiary, caste = "fathers", nInd = 2)
getCasteAa(apiary, caste = "fathers", nInd = 2) # random sample!
getFathersAa(apiary)
getFathersAa(apiary, nInd = 2)

getCasteAa(apiary, caste = "virginQueens")
getVirginQueensAa(apiary)

getCasteAa(apiary, caste = "workers")
getWorkersAa(apiary)

getCasteAa(apiary, caste = "drones")
getDronesAa(apiary)
}
\seealso{
\code{\link{dd}}
}
