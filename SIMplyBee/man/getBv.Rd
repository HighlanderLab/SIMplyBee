% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions_L0_auxilary.R
\name{getBv}
\alias{getBv}
\alias{getQueenBv}
\alias{getFathersBv}
\alias{getVirginQueensBv}
\alias{getWorkersBv}
\alias{getDronesBv}
\title{Access breeding values of individuals in a caste}
\usage{
getBv(x, caste = NULL, nInd = NULL, collapse = FALSE, simParamBee = NULL)

getQueenBv(x, collapse = FALSE, simParamBee = NULL)

getFathersBv(x, nInd = NULL, collapse = FALSE, simParamBee = NULL)

getVirginQueensBv(x, nInd = NULL, collapse = FALSE, simParamBee = NULL)

getWorkersBv(x, nInd = NULL, collapse = FALSE, simParamBee = NULL)

getDronesBv(x, nInd = NULL, collapse = FALSE, simParamBee = NULL)
}
\arguments{
\item{x}{\code{\link{Pop-class}}, \code{\link{Colony-class}}, or
\code{\link{MultiColony-class}}}

\item{caste}{NULL or character, NULL when \code{x} is a \code{\link{Pop-class}},
and character when \code{x} is a \code{\link{Colony-class}} or
 \code{\link{MultiColony-class}} with the possible values of "queen", "fathers",
 "workers", "drones", "virginQueens", or "all"}

\item{nInd}{numeric, number of individuals to access, if \code{NULL} all
individuals are accessed, otherwise a random sample}

\item{collapse}{logical, if the return value should be a single matrix
with breeding valued of all the individuals}

\item{simParamBee}{\code{\link{SimParamBee}}, global simulation parameters}
}
\value{
vector of breeding values when \code{x} is \code{\link{Colony-class}}
  and list of vectors of breeding values when \code{x} is
  \code{\link{MultiColony-class}}, named by colony id when \code{x} is
  \code{\link{MultiColony-class}}
}
\description{
Level 0 function that returns breeding values of individuals in
  a caste.
}
\section{Functions}{
\itemize{
\item \code{getQueenBv()}: Access breeding value of the queen

\item \code{getFathersBv()}: Access breeding values of fathers

\item \code{getVirginQueensBv()}: Access breeding values of virgin queens

\item \code{getWorkersBv()}: Access breeding values of workers

\item \code{getDronesBv()}: Access breeding values of drones

}}
\examples{
founderGenomes <- quickHaplo(nInd = 8, nChr = 1, segSites = 100)
SP <- SimParamBee$new(founderGenomes)
SP$addTraitA(nQtlPerChr = 10, var = 1)
SP$addSnpChip(5)
basePop <- createVirginQueens(founderGenomes)

drones <- createDrones(x = basePop[1], nInd = 1000)
droneGroups <- pullDroneGroupsFromDCA(drones, n = 10, nDrones = nFathersPoisson)

# Create a Colony and a MultiColony class
colony <- createColony(x = basePop[2])
colony <- cross(colony, drones = droneGroups[[1]])
colony <- buildUp(x = colony, nWorkers = 6, nDrones = 3)
colony <- addVirginQueens(x = colony, nInd = 5)

apiary <- createMultiColony(basePop[3:4], n = 2)
apiary <- cross(apiary, drones = droneGroups[c(2, 3)])
apiary <- buildUp(x = apiary, nWorkers = 6, nDrones = 3)
apiary <- addVirginQueens(x = apiary, nInd = 5)

# Input is a population
getBv(x = getQueen(colony))
queens <- getQueen(apiary, collapse = TRUE)
getBv(queens)

# Input is a colony
getBv(colony, caste = "queen")
getQueenBv(colony)

getBv(colony, caste = "fathers")
getBv(colony, caste = "fathers", nInd = 2)
getBv(colony, caste = "fathers", nInd = 2) # random sample!
getFathersBv(colony)
getFathersBv(colony, nInd = 2)

getBv(colony, caste = "virginQueens")
getVirginQueensBv(colony)

getBv(colony, caste = "workers")
getWorkersBv(colony)

getBv(colony, caste = "drones")
getDronesBv(colony)

# Get breeding values for all individuals
getBv(colony, caste = "all")
# Get all breeding values in a single matrix
getBv(colony, caste = "all", collapse = TRUE)

# Input is a MultiColony
getBv(apiary, caste = "queen")
getQueenBv(apiary)

getBv(apiary, caste = "fathers")
getBv(apiary, caste = "fathers", nInd = 2)
getBv(apiary, caste = "fathers", nInd = 2) # random sample!
getFathersBv(apiary)
getFathersBv(apiary, nInd = 2)

getBv(apiary, caste = "virginQueens")
getVirginQueensBv(apiary)

getBv(apiary, caste = "workers")
getWorkersBv(apiary)

getBv(apiary, caste = "drones")
getDronesBv(apiary)

# Get the breeding values of all individuals either by colony or in a single matrix
getBv(apiary, caste = "all")
getBv(apiary, caste = "all", collapse = TRUE)
}
\seealso{
\code{\link{bv}}
}
